--
-- Truncate table before insert `flash`
--

TRUNCATE TABLE `flash`;
--
-- Dumping data for table `flash`
--

INSERT INTO `flash` (`id`, `name`, `knowledge`, `url`) VALUES
(1, '﻿1-2-4 软件兼容', '软件兼容，向上兼容，向下兼容，向前兼容，向后兼容', '/course-share/flash/read/﻿1-2-4'),
(2, '1-2-1 计算机的多级层次结构', '多级层次结构，虚拟机，解释，翻译', '/course-share/flash/read/1-2-1'),
(3, '1-2-3 PC系列机典型结构的发展和比较', '冯•诺依曼结构', '/course-share/flash/read/1-2-3'),
(4, '1-3-1 存储程序机器的结果', '冯•诺依曼结构', '/course-share/flash/read/1-3-1'),
(5, '1-5-1 CPU的性能', 'CPU性能公式，IC，CPI', '/course-share/flash/read/1-5-1'),
(6, '1-6-1 并行性的等级', '并行性', '/course-share/flash/read/1-6-1'),
(7, '1-6-2 提供并行性的技术途径', '时间重叠，资源重复，资源共享', '/course-share/flash/read/1-6-2'),
(8, '2-2-1 当前指令集结构中所使用的一些操作数寻址方式', '寻址方式', '/course-share/flash/read/2-2-1'),
(9, '2-3-1 各种机器的语义差距', 'CISC指令集结构的功能设计，CISC', '/course-share/flash/read/2-3-1'),
(10, '2-3-2 Intel80x86最常用的10条指令', 'CISC指令集结构的功能设计，CISC', '/course-share/flash/read/2-3-2'),
(11, '2-5-1 寻址方式的表示方法', '寻址方式', '/course-share/flash/read/2-5-1'),
(12, '3-1-2 两种方案对比', '流水线技术', '/course-share/flash/read/3-1-2'),
(13, '3-1-6 浮点加法流水线', '流水线技术，部件级流水线', '/course-share/flash/read/3-1-6'),
(14, '3-1-9 TIASC的多功能流水线', '多功能流水线', '/course-share/flash/read/3-1-9'),
(15, '3-1-15 宏流水线', '宏流水线', '/course-share/flash/read/3-1-15'),
(16, '3-1-16 非线性流水线', '非线性流水线', '/course-share/flash/read/3-1-16'),
(17, '3-1-17 非线性流水线的调度问题', '非线性流水线', '/course-share/flash/read/3-1-17'),
(18, '3-2-1 实现MIPS指令的一种简单数据通路', '数据通路', '/course-share/flash/read/3-2-1'),
(19, '3-2-2 取指令IF周期的操作', '取指令周期IF的操作', '/course-share/flash/read/3-2-2'),
(20, '3-2-3 指令译码读寄存器ID周期的操作', '指令译码/读寄存器周期ID的操作', '/course-share/flash/read/3-2-3'),
(21, '3-2-4 存储器访问指令有效地址计算EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-4'),
(22, '3-2-5 寄存器寄存器ALU指令执行EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-5'),
(23, '3-2-6 寄存器立即值ALU指令执行EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-6'),
(24, '3-2-7 分支操作指令有效地址计算EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-7'),
(25, '3-2-8 LOADSTORE存储器访问指令MEM周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/flash/read/3-2-8'),
(26, '3-2-9 分支指令分支完成MEM周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/flash/read/3-2-9'),
(27, '3-2-10 寄存器寄存器型ALU指令写回WB周期的操作', '写回周期WB的操作', '/course-share/flash/read/3-2-10'),
(28, '3-2-11 寄存器立即值型ALU指令写回WB周期的操作', '写回周期WB的操作', '/course-share/flash/read/3-2-11'),
(29, '3-2-12 LOAD指令写回WB周期的操作', '写回周期WB的操作', '/course-share/flash/read/3-2-12'),
(30, '3-2-14 流水线可以看成是按时间错开的数据通路序列', '数据通路，基本的MIPS流水线', '/course-share/flash/read/3-2-14'),
(31, '3-2-18 MIPS流水线数据通路', '数据通路，基本的MIPS流水线', '/course-share/flash/read/3-2-18'),
(32, '3-2-19 MIPS流水线寄存器命名', '流水线寄存器', '/course-share/flash/read/3-2-19'),
(33, '3-2-21 流水线寄存器的构成', '流水线寄存器', '/course-share/flash/read/3-2-21'),
(34, '3-2-22 MIPS流水线取指令IF周期的操作', '取指令周期IF的操作', '/course-share/flash/read/3-2-22'),
(35, '3-2-23 MIPS流水线指令译码读寄存器ID周期的操作', '指令译码/读寄存器周期ID的操作', '/course-share/flash/read/3-2-23'),
(36, '3-2-24 MIPS流水线ALU指令执行EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-24'),
(37, '3-2-25 MIPS流水线LOADSTORE指令有效地址计算EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-25'),
(38, '3-2-26 分支指令有效地址计算EX周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/flash/read/3-2-26'),
(39, '3-2-27 MIPS流水线ALU指令存储器访问MEM周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/flash/read/3-2-27'),
(40, '3-2-28 MIPS流水线LOADSTORE指令存储器访问MEM周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/flash/read/3-2-28'),
(41, '3-2-29 MMIPS流水线ALU指令写回WB周期的操作', '写回周期WB的操作', '/course-share/flash/read/3-2-29'),
(42, '3-2-30 MIPS流水线LOADSTORE指令写回WB周期的操作', '写回周期WB的操作', '/course-share/flash/read/3-2-30'),
(43, '3-2-31 对多路选择器MUX的控制', '基本的MIPS流水线', '/course-share/flash/read/3-2-31'),
(44, '3-2-33 带瓶颈段流水线的时空图', '时空图，重复设置瓶颈段', '/course-share/flash/read/3-2-33'),
(45, '3-2-34 流水线各段时间相等的时-空图和吞吐率', '时空图，吞吐率', '/course-share/flash/read/3-2-34'),
(46, '3-2-35 流水线完成n个连续任务所需要的总时间（各段时间相等）', '吞吐率', '/course-share/flash/read/3-2-35'),
(47, '3-2-36 流水线时空图（各段时间不等）', '时空图', '/course-share/flash/read/3-2-36'),
(48, '3-2-37 非流水方式所需的时间', '流水线加速比', '/course-share/flash/read/3-2-37'),
(49, '3-2-38 通过时间和排空时间', '通过时间，排空时间', '/course-share/flash/read/3-2-38'),
(50, '3-2-40 根据时空图计算效率举例', '时空图，效率', '/course-share/flash/read/3-2-40'),
(51, '3-3-1 结构冲突举例——访存冲突', '结构冲突', '/course-share/flash/read/3-3-1'),
(52, '3-3-2 流水线气泡', '流水线冲突', '/course-share/flash/read/3-3-2'),
(53, '3-3-3 引入暂停后的流水线时空图', '结构冲突，流水线冲突', '/course-share/flash/read/3-3-3'),
(54, '3-3-4 数据冲突举例', '数据冲突', '/course-share/flash/read/3-3-4'),
(55, '3-3-5 采用定向技术消除数据冲突', '数据冲突，定向技术', '/course-share/flash/read/3-3-5'),
(56, '3-3-7 到数据存储器和ALU的定向路径', '数据冲突，定向技术', '/course-share/flash/read/3-3-7'),
(57, '3-3-8 两条指令对同一寄存器的读写顺序', '写后读冲突，写后写冲突，读后写冲突', '/course-share/flash/read/3-3-8'),
(58, '3-3-10 定向技术不能解决的数据冲突', '数据冲突，定向技术', '/course-share/flash/read/3-3-10'),
(59, '3-3-11 冲突时暂停流水线', '数据冲突', '/course-share/flash/read/3-3-11'),
(60, '3-3-12 在插入“暂停”的情况下流水线的工作过程', '定向技术，写后读冲突，数据冲突', '/course-share/flash/read/3-3-12'),
(61, '3-3-13 在插入“暂停”情况下，流水线的时空图', '定向技术，写后读冲突，数据冲突', '/course-share/flash/read/3-3-13'),
(62, '3-3-14 表达式A=B+C的代码及其流水执行', '数据冲突', '/course-share/flash/read/3-3-14'),
(63, '3-3-15 表达式A=B+CD=E-F的代码的调度', '数据冲突', '/course-share/flash/read/3-3-15'),
(64, '3-3-16 流水线相关检测硬件可以检测到各种相关情况', '数据冲突，Load互锁，基本的MIPS流水线', '/course-share/flash/read/3-3-16'),
(65, '3-3-17 在ID段检测Load互锁需进行三种比较', '数据冲突，Load互锁，基本的MIPS流水线', '/course-share/flash/read/3-3-17'),
(66, '3-3-18 定向路径', '数据冲突，定向技术', '/course-share/flash/read/3-3-18'),
(67, '3-3-19 分支转移成功导致暂停3个时钟周期', '控制冲突', '/course-share/flash/read/3-3-19'),
(68, '3-3-25 流水线分支的处理过程', '控制冲突', '/course-share/flash/read/3-3-25'),
(69, '3-3-28 分支延迟指令的三种调度方法', '控制冲突，延迟分支，分支延迟', '/course-share/flash/read/3-3-28'),
(70, '3-3-27 延迟分支的执行过程', '控制冲突，延迟分支，分支延迟', '/course-share/flash/read/3-3-27'),
(71, '3-3-29 “取消”分支', '控制冲突，延迟分支，分支延迟', '/course-share/flash/read/3-3-29'),
(72, '3-3-30 “预测成功——取消”分支的执行过程', '控制冲突，延迟分支，分支延迟', '/course-share/flash/read/3-3-30'),
(73, '3-3-50 转移成功时，PC值的改变', '基本的MIPS流水线', '/course-share/flash/read/3-3-50'),
(74, '3-5-2 水平（横向）处理方式', '横向（水平）处理方式', '/course-share/flash/read/3-5-2'),
(75, '3-5-3 垂直（纵向）处理方式', '纵向（垂直）处理方式', '/course-share/flash/read/3-5-3'),
(76, '3-5-4 存储器——存储器型操作的运算流水线', '存储器-存储器型操作的运算流水线', '/course-share/flash/read/3-5-4'),
(77, '3-5-5 分组（纵横）处理方式', '纵横（分组）处理方式', '/course-share/flash/read/3-5-5'),
(78, '3-5-7 CRAY-1的基本结构', 'Cray-1向量处理机的结构', '/course-share/flash/read/3-5-7'),
(79, '3-5-1 向量ABCD', '横向（水平）处理方式，纵向（垂直）处理方式，纵横（分组）处理方式', '/course-share/flash/read/3-5-1'),
(80, '5-1-1 存储器', '多级存储层次', '/course-share/flash/read/5-1-1'),
(81, '5-1-6 程序局部性原理', '程序局部性原理', '/course-share/flash/read/5-1-6'),
(82, '5-1-7 存储层次的性能参数', '存储容量，命中时间，平均访问时间', '/course-share/flash/read/5-1-7'),
(83, '5-1-8 每位价格C', '每位价格', '/course-share/flash/read/5-1-8'),
(84, '5-1-9 命中率', '命中率', '/course-share/flash/read/5-1-9'),
(85, '5-1-10 平均访问时间', '平均访问时间，命中时间，失效开销，失效率', '/course-share/flash/read/5-1-10'),
(86, '5-1-11 失效开销', '失效开销', '/course-share/flash/read/5-1-11'),
(87, '5-1-12 从主存的角度来看两个存储层次', '“Cache-主存”层次，“主存—辅存”层次', '/course-share/flash/read/5-1-12'),
(88, '5-1-14 cache-主存层次', '“Cache-主存”层次', '/course-share/flash/read/5-1-14'),
(89, '5-1-15 主存辅存层次', '“主存—辅存”层次', '/course-share/flash/read/5-1-15'),
(90, '5-1-16 映像规则', '映像规则', '/course-share/flash/read/5-1-16'),
(91, '5-1-17 查找算法', '查找算法', '/course-share/flash/read/5-1-17'),
(92, '5-1-18 写策略', '写策略', '/course-share/flash/read/5-1-18'),
(93, '5-2-1 存储空间分割与地址计算', '块地址，块内位移', '/course-share/flash/read/5-2-1'),
(94, '5-2-2 cache和主存的分块', '块地址，块内位移', '/course-share/flash/read/5-2-2'),
(95, '5-2-3 全相联映像举例', '全相联映像，映像规则', '/course-share/flash/read/5-2-3'),
(96, '5-2-4 直接映像举例', '直接映像，映像规则', '/course-share/flash/read/5-2-4'),
(97, '5-2-5 组相联映像举例', '组相联映像，映像规则', '/course-share/flash/read/5-2-5'),
(98, '5-2-6 组相联=直接映像+全相联', '全相联映像，直接映像，组相联映像，映像规则', '/course-share/flash/read/5-2-6'),
(99, '5-2-7 CACHE目录表的结构', '查找算法', '/course-share/flash/read/5-2-7'),
(100, '5-2-8 CACHE中的候选位置', '查找算法，候选位置', '/course-share/flash/read/5-2-8'),
(101, '5-2-9 并行查找与顺序查找', '查找算法', '/course-share/flash/read/5-2-9'),
(102, '5-2-10 CACHE中的主候选位置', '查找算法，候选位置', '/course-share/flash/read/5-2-10'),
(103, '5-2-11 4路组相联并行标识比较', '查找算法', '/course-share/flash/read/5-2-11'),
(104, '5-2-12 直接映像CACHE的查找过程', '查找算法', '/course-share/flash/read/5-2-12'),
(105, '5-2-14 LRU和随机法的失效率的比较', 'LRU，随机法，替换算法', '/course-share/flash/read/5-2-14'),
(106, '5-2-15 cache和主存内容的一致性问题', '写策略', '/course-share/flash/read/5-2-15'),
(107, '5-2-16 AlphaAXP21064中数据cache的结构', 'Cache的结构', '/course-share/flash/read/5-2-16'),
(108, '5-2-17 AlphaAXP21064中cache的读访问过程', 'Cache的结构', '/course-share/flash/read/5-2-17'),
(109, '5-2-18 AlphaAXP21064中cache的写访问过程', 'Cache的结构', '/course-share/flash/read/5-2-18'),
(110, '5-2-20 程序执行时间', '程序执行时间', '/course-share/flash/read/5-2-20'),
(111, '5-3-3 CACHE失效与块大小的关系', '增加Cache块大小', '/course-share/flash/read/5-3-3'),
(112, '5-3-4 例5.4解题过程', '增加Cache块大小', '/course-share/flash/read/5-3-4'),
(113, '5-3-5 VictimCache的工作过程', 'Victim Cache', '/course-share/flash/read/5-3-5'),
(114, '5-3-7 快速命中与慢速命中', '伪相联Cache', '/course-share/flash/read/5-3-7'),
(115, '5-3-10 分块前数组乘法计算过程', '编译器优化', '/course-share/flash/read/5-3-10'),
(116, '5-3-11 分块后数组乘法计算过程', '编译器优化', '/course-share/flash/read/5-3-11'),
(117, '5-4-2 重叠失效个数对平均访问时间的影响', '非阻塞Cache', '/course-share/flash/read/5-4-2'),
(118, '5-5-1 三种方式下虚拟CACHE的失效率', '虚拟Cache', '/course-share/flash/read/5-5-1'),
(119, '5-6-2 多体交叉存储器', '多体交叉存储器', '/course-share/flash/read/5-6-2'),
(120, '5-6-1 增加存储器的宽度', '增加存储器的宽度', '/course-share/flash/read/5-6-1'),
(121, '5-7-1 AlphaAXP21064的地址转换过程', '快表TLB', '/course-share/flash/read/5-7-1'),
(122, '5-9-1 AlphaAXP21064存储层次的整体结构', 'AlphaAXP21064存储层次', '/course-share/flash/read/5-9-1'),
(123, '5-9-2 AlphaAXP21064存储层次的工作过程', 'AlphaAXP21064存储层次', '/course-share/flash/read/5-9-2'),
(124, '6-5-1 通道完成一次数据传输的过程', '通道的工作过程，通道', '/course-share/flash/read/6-5-1'),
(125, '6-5-2 通道程序、用户程序和管理程序之间的关系', '通道的工作过程，通道', '/course-share/flash/read/6-5-2'),
(126, '6-5-3 三种类型的通道与CPU、设备控制器和外围设备的连接关系', '字节多路通道，数组多路通道，选择通道', '/course-share/flash/read/6-5-3'),
(127, '6-5-4 字节多路通道的数据传送过程', '字节多路通道，通道流量', '/course-share/flash/read/6-5-4'),
(128, '6-5-5 数组多路通道的数据传送过程', '数组多路通道，通道流量', '/course-share/flash/read/6-5-5'),
(129, '6-5-6 选择通道的数据传送过程', '选择通道，通道流量', '/course-share/flash/read/6-5-6'),
(130, '6-5-7 通道的流量分析', '通道流量，通道最大流量', '/course-share/flash/read/6-5-7'),
(131, '7-4-1 均匀混洗', '均匀洗牌函数', '/course-share/flash/read/7-4-1'),
(132, '7-4-2 逆均匀混洗', '逆均匀洗牌函数', '/course-share/flash/read/7-4-2'),
(133, '7-4-4 根据最低位C0路由', '立方体互连函数', '/course-share/flash/read/7-4-4'),
(134, '7-4-5 根据中间位C1路由', '立方体互连函数', '/course-share/flash/read/7-4-5'),
(135, '7-4-6 根据最高位C2路由', '立方体互连函数', '/course-share/flash/read/7-4-6'),
(136, '7-4-7 线性阵列', '静态互连网络，线性阵列', '/course-share/flash/read/7-4-7'),
(137, '7-4-8 环', '静态互连网络，环', '/course-share/flash/read/7-4-8'),
(138, '7-4-9 带弦环', '静态互连网络，带弦环', '/course-share/flash/read/7-4-9'),
(139, '7-4-10 全连接', '静态互连网络，全连接网络', '/course-share/flash/read/7-4-10'),
(140, '7-4-11 循环移数网络', '静态互连网络，循环移数网络', '/course-share/flash/read/7-4-11'),
(141, '7-4-12 二叉树', '静态互连网络，二叉树', '/course-share/flash/read/7-4-12'),
(142, '7-4-13 星形', '静态互连网络，星形', '/course-share/flash/read/7-4-13'),
(143, '7-4-14 二叉胖树', '静态互连网络，二叉胖树', '/course-share/flash/read/7-4-14'),
(144, '7-4-15 网格形', '静态互连网络，网格形', '/course-share/flash/read/7-4-15'),
(145, '7-4-16 环形网', '静态互连网络，环形网', '/course-share/flash/read/7-4-16'),
(146, '7-4-17 超立方体', '静态互连网络，超立方', '/course-share/flash/read/7-4-17'),
(147, '7-4-19 一种交叉网络', '动态互连网络，交叉开关网络', '/course-share/flash/read/7-4-19'),
(148, '7-4-21 由axb开关模块和级间构成的通用多级互联网络结构', '动态互连网络，多级互连网络，开关模块，Omega网络', '/course-share/flash/read/7-4-21'),
(149, '7-4-22 用于构造Omega网络的2x2开关四种可能的连接方式', '动态互连网络，开关模块，Omega网络', '/course-share/flash/read/7-4-22'),
(150, '7-4-23 用2x2开关和均匀混洗构成的16x16Omega网络', '动态互连网络，开关模块，Omega网络，均匀洗牌函数', '/course-share/flash/read/7-4-23'),
(151, '7-4-33 立方体', '静态互连网络，立方体互连函数', '/course-share/flash/read/7-4-33'),
(152, '8-1-1 集中式共享存储器多处理机的基本结构', '集中式共享多处理机', '/course-share/flash/read/8-1-1'),
(153, '8-1-2 分布式存储器结构的机器基本结构', '分布式共享多处理机', '/course-share/flash/read/8-1-2'),
(154, '8-2-1 由两个处理器（A和B）读写引起的Cache一致性问题', '多Cache一致性', '/course-share/flash/read/8-2-1'),
(155, '8-2-2 在写回cache的情况下，监听总线中写作废协议的实现', '多Cache一致性，监听协议，写作废协议', '/course-share/flash/read/8-2-2'),
(156, '8-3-1 对每个结点增加目录后的分布式存储器结构', '分布式共享多处理机，目录', '/course-share/flash/read/8-3-1');

--
-- Truncate table before insert `image`
--

TRUNCATE TABLE `image`;
--
-- Dumping data for table `image`
--

INSERT INTO `image` (`id`, `name`, `knowledge`, `url`) VALUES
(1, '1-2-1 计算机的多级层次结构', '多级层次结构，虚拟机，解释，翻译', '/course-share/image/read/1-2-1'),
(2, '1-2-3 PC系列机典型结构的发展和比较', '冯•诺依曼结构', '/course-share/image/read/1-2-3'),
(3, '1-2-4 软件兼容', '软件兼容，向上兼容，向下兼容，向前兼容，向后兼容', '/course-share/image/read/1-2-4'),
(4, '1-2-5 按最大并行度分类的冯氏分类法', '最大并行度，冯氏分类法', '/course-share/image/read/1-2-5'),
(5, '1-2-6 4类计算机的基本结构', 'Flynn分类法', '/course-share/image/read/1-2-6'),
(6, '1-3-1 存储程序机器的结果', '冯•诺依曼结构', '/course-share/image/read/1-3-1'),
(7, '1-4-1 用模拟方法实现应用软件的移植', '模拟，程序可移植性', '/course-share/image/read/1-4-1'),
(8, '1-4-2 用仿真方法实现应用软件的移植', '仿真，程序可移植性', '/course-share/image/read/1-4-2'),
(9, '1-4-3 系统结构的生命周期', '系统结构的生命周期', '/course-share/image/read/1-4-3'),
(10, '1-5-1 CPU的性能', 'CPU性能公式，IC，CPI', '/course-share/image/read/1-5-1'),
(11, '1-6-1 并行性的等级', '并行性', '/course-share/image/read/1-6-1'),
(12, '1-6-2 提供并行性的技术途径', '时间重叠，资源重复，资源共享', '/course-share/image/read/1-6-2'),
(13, '2-1-1 4种指令集结构的操作数的位置以及结果的去向', '堆栈型机器，累加器型机器，寄存器－寄存器型结构，寄存器－存储器型结构', '/course-share/image/read/2-1-1'),
(14, '2-2-1 当前指令集结构中所使用的一些操作数寻址方式', '寻址方式', '/course-share/image/read/2-2-1'),
(15, '2-2-2 各种寻址方式的使用情况统计结果', '寻址方式', '/course-share/image/read/2-2-2'),
(16, '2-2-3 偏移量的取值范围', '寻址方式', '/course-share/image/read/2-2-3'),
(17, '2-2-4 立即数的取值范围', '寻址方式', '/course-share/image/read/2-2-4'),
(18, '2-3-1 各种机器的语义差距', 'CISC指令集结构的功能设计，CISC', '/course-share/image/read/2-3-1'),
(19, '2-3-2 Intel80x86最常用的10条指令', 'CISC指令集结构的功能设计，CISC', '/course-share/image/read/2-3-2'),
(20, '2-3-3 一般循环程序的结构', 'CISC指令集结构的功能设计', '/course-share/image/read/2-3-3'),
(21, '2-5-1 寻址方式的表示方法', '寻址方式', '/course-share/image/read/2-5-1'),
(22, '2-5-2 指令集的3种编码格式', '变长编码格式，固定长度编码格式，混合型编码格式', '/course-share/image/read/2-5-2'),
(23, '2-6-1 MIPS的指令格式I类指令', 'MIPS的指令格式', '/course-share/image/read/2-6-1'),
(24, '2-6-2 MIPS的指令格式R类指令', 'MIPS的指令格式', '/course-share/image/read/2-6-2'),
(25, '2-6-3 MIPS的指令格式J类指令', 'MIPS的指令格式', '/course-share/image/read/2-6-3'),
(26, '3-1-2 两种方案对比', '流水线技术', '/course-share/image/read/3-1-2'),
(27, '3-1-3 流水线生产过程的抽象描述', '流水线技术', '/course-share/image/read/3-1-3'),
(28, '3-1-6 浮点加法流水线', '流水线技术，部件级流水线', '/course-share/image/read/3-1-6'),
(29, '3-1-7 流水线的时空图', '时空图', '/course-share/image/read/3-1-7'),
(30, '3-1-8 动态流水线举例', '动态流水线', '/course-share/image/read/3-1-8'),
(31, '3-1-9 TIASC的多功能流水线', '多功能流水线', '/course-share/image/read/3-1-9'),
(32, '3-1-10 静、动态流水线时空图的对比', '静态流水线，动态流水线，时空图', '/course-share/image/read/3-1-10'),
(33, '3-1-15 宏流水线', '宏流水线', '/course-share/image/read/3-1-15'),
(34, '3-1-16 非线性流水线', '非线性流水线', '/course-share/image/read/3-1-16'),
(35, '3-1-17 流水线的调度问题', '非线性流水线', '/course-share/image/read/3-1-17'),
(36, '3-2-1 实现MIPS指令的一种简单数据通路', '数据通路', '/course-share/image/read/3-2-1'),
(37, '3-2-2 取指令周期的操作', '取指令周期IF的操作', '/course-share/image/read/3-2-2'),
(38, '3-2-3 指令译码读寄存器周期的操作', '指令译码/读寄存器周期ID的操作', '/course-share/image/read/3-2-3'),
(39, '3-2-4 存储器访问指令有效地址计算周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/image/read/3-2-4'),
(40, '3-2-5 寄存器寄存器ALU指令执行周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/image/read/3-2-5'),
(41, '3-2-6 寄存器立即值ALU指令执行周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/image/read/3-2-6'),
(42, '3-2-7 分支操作指令有效地址计算周期的操作', '执行/有效地址计算周期EX的操作', '/course-share/image/read/3-2-7'),
(43, '3-2-8 LOAD指令存储器访问周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/image/read/3-2-8'),
(44, '3-2-8 STORE指令存储器访问周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/image/read/3-2-8'),
(45, '3-2-9 分支完成周期的操作', '存储器访问/分支完成周期MEM的操作', '/course-share/image/read/3-2-9'),
(46, '3-3-51 为减少分支延迟，改进后的MIPS流水线数据通路', '数据通路，基本的MIPS流水线', '/course-share/image/read/3-3-51'),
(47, '3-5-1 向量ABCD', '横向（水平）处理方式，纵向（垂直）处理方式，纵横（分组）处理方式', '/course-share/image/read/3-5-1'),
(48, '3-5-2 水平（横向）处理方式', '横向（水平）处理方式', '/course-share/image/read/3-5-2'),
(49, '3-5-3 垂直（纵向）处理方式', '纵向（垂直）处理方式', '/course-share/image/read/3-5-3'),
(50, '3-5-4 存储器——存储器型操作的运算流水线', '存储器-存储器型操作的运算流水线', '/course-share/image/read/3-5-4'),
(51, '3-5-5 分组（纵横）处理方式', '纵横（分组）处理方式', '/course-share/image/read/3-5-5'),
(52, '3-5-7 CRAY-1的基本结构', 'Cray-1向量处理机的结构', '/course-share/image/read/3-5-7'),
(53, '3-5-8 CRAY-1的向量指令类型', 'Cray-1向量处理机的结构', '/course-share/image/read/3-5-8'),
(54, '4-2-1 基于Tomasulo算法的MIPS处理器浮点部件的基本结构', 'Tomasulo算法', '/course-share/image/read/4-2-1'),
(55, '4-3-1 两位分支预测的状态转换', '分支历史表BHT', '/course-share/image/read/4-3-1'),
(56, '4-3-2 BTB的结构', '分支目标缓冲器BTB', '/course-share/image/read/4-3-2'),
(57, '4-3-3 采用BTB后，在流水线各个阶段所进行的相关操作', '分支目标缓冲器BTB', '/course-share/image/read/4-3-3'),
(58, '4-3-4 BTB的另一种形式', '分支目标缓冲器BTB', '/course-share/image/read/4-3-4'),
(59, '4-3-5 支持前瞻执行的浮点部件的结构', '前瞻执行，再定序缓冲ROB', '/course-share/image/read/4-3-5'),
(60, '4-4-1 单流出和多流出处理机执行指令的时空图', '多流出', '/course-share/image/read/4-4-1'),
(61, '4-4-2 一些基本的多流出技术的特点', '多流出', '/course-share/image/read/4-4-2'),
(62, '4-4-3 一台每个时钟周期分时流出两条指令的超流水线计算机的时空图', '超流水', '/course-share/image/read/4-4-3'),
(63, '4-4-4 MIPS_R4000的指令流水线的结构', 'MIPS R4000的指令流水线', '/course-share/image/read/4-4-4'),
(64, '4-4-5 MIPS_R4000指令流水线时空图', 'MIPS R4000的指令流水线', '/course-share/image/read/4-4-5'),
(65, '4-4-6 MIPS_R4000指令流水线的载入延迟', 'MIPS R4000的指令流水线', '/course-share/image/read/4-4-6'),
(66, '5-1-1 存储器', '多级存储层次', '/course-share/image/read/5-1-1'),
(67, '5-1-2 主存与CPU的速度差距', '多级存储层次', '/course-share/image/read/5-1-2'),
(68, '5-1-3 多级存储层次', '多级存储层次', '/course-share/image/read/5-1-3'),
(69, '5-1-6 程序局部性原理', '程序局部性原理', '/course-share/image/read/5-1-6'),
(70, '5-1-7 存储层次的性能参数', '存储容量，命中时间，平均访问时间', '/course-share/image/read/5-1-7'),
(71, '5-1-8 每位价格C', '每位价格', '/course-share/image/read/5-1-8'),
(72, '5-1-9 命中率', '命中率', '/course-share/image/read/5-1-9'),
(73, '5-2-1 存储空间分割与地址计算', '块地址，块内位移', '/course-share/image/read/5-2-1'),
(74, '5-2-2 cache和主存的分块', '块地址，块内位移', '/course-share/image/read/5-2-2'),
(75, '5-2-3 全相联映像举例', '全相联映像', '/course-share/image/read/5-2-3'),
(76, '5-2-4 直接映像举例', '直接映像', '/course-share/image/read/5-2-4'),
(77, '5-2-5 组相联映像举例', '组相联', '/course-share/image/read/5-2-5'),
(78, '5-2-6 组相联=直接映像+全相联', '全相联映像，直接映像，组相联映像', '/course-share/image/read/5-2-6'),
(79, '5-2-7 CACHE目录表的结构', '查找方法', '/course-share/image/read/5-2-7'),
(80, '5-2-8 CACHE中的候选位置', '查找方法，候选位置', '/course-share/image/read/5-2-8'),
(81, '5-2-9 并行查找与顺序查找', '查找方法', '/course-share/image/read/5-2-9'),
(82, '5-3-1 三种失效所占的比例的绝对值', '强制性失效，容量失效，冲突失效', '/course-share/image/read/5-3-1'),
(83, '5-3-2 三种失效所占的比例的相对值', '强制性失效，容量失效，冲突失效', '/course-share/image/read/5-3-2'),
(84, '5-3-3 CACHE失效与块大小的关系', '增加Cache块大小', '/course-share/image/read/5-3-3'),
(85, '5-3-4 例5.4解题过程', '增加Cache块大小', '/course-share/image/read/5-3-4'),
(86, '5-3-5 Victim_Cache_的工作过程', 'Victim Cache', '/course-share/image/read/5-3-5'),
(87, '5-3-6 伪相联Cache', '伪相联Cache', '/course-share/image/read/5-3-6'),
(88, '5-3-7 快速命中与慢速命中', '伪相联Cache', '/course-share/image/read/5-3-7'),
(89, '5-4-1 写缓冲合并', '写缓冲合并', '/course-share/image/read/5-4-1'),
(90, '5-4-2 重叠失效个数对平均访问时间的影响', '非阻塞Cache', '/course-share/image/read/5-4-2'),
(91, '5-5-1 三种方式下虚拟CACHE的失效率', '虚拟Cache', '/course-share/image/read/5-5-1'),
(92, '5-6-2 多体交叉存储器', '多体交叉存储器', '/course-share/image/read/5-6-2'),
(93, '5-6-1 增加存储器的宽度', '增加存储器的宽度', '/course-share/image/read/5-6-1'),
(94, '5-6-3 顺序交叉和取模交叉的地址映像举例', '存储体冲突', '/course-share/image/read/5-6-3'),
(95, '5-7-1 AlphaAXP21064的地址转换过程', '快表TLB', '/course-share/image/read/5-7-1'),
(96, '5-7-2 用页表实现虚拟地址到物理地址的映射', '快表TLB', '/course-share/image/read/5-7-2'),
(97, '5-8-4 Alpha_AXP_21064_TLB的存储层次参数', '快表TLB', '/course-share/image/read/5-8-4'),
(98, '6-3-1 RAID0', '廉价磁盘冗余阵列RAID，RAID0', '/course-share/image/read/6-3-1'),
(99, '6-3-2 RAID1', '廉价磁盘冗余阵列RAID，RAID1', '/course-share/image/read/6-3-2'),
(100, '6-3-3 含4个数据盘的RAID2', '廉价磁盘冗余阵列RAID，RAID2', '/course-share/image/read/6-3-3'),
(101, '6-3-4 RAID3', '廉价磁盘冗余阵列RAID，RAID3', '/course-share/image/read/6-3-4'),
(102, '6-3-5 RAID4', '廉价磁盘冗余阵列RAID，RAID4', '/course-share/image/read/6-3-5'),
(103, '6-3-6 RAID4的写入操作', '廉价磁盘冗余阵列RAID，RAID4', '/course-share/image/read/6-3-6'),
(104, '6-3-7 RAID5', '廉价磁盘冗余阵列RAID，RAID5', '/course-share/image/read/6-3-7'),
(105, '6-3-8 RAID6', '廉价磁盘冗余阵列RAID，RAID6', '/course-share/image/read/6-3-8'),
(106, '6-3-9 RAID10', '廉价磁盘冗余阵列RAID，RAID10', '/course-share/image/read/6-3-9'),
(107, '6-4-1 常见IO总线的一些典型特征', 'IO总线', '/course-share/image/read/6-4-1'),
(108, '6-4-2 在嵌入式系统中使用较多的4种串行IO总线的一些典型特征', 'IO总线', '/course-share/image/read/6-4-2'),
(109, '6-4-3 在服务器系统中使用的CPU-存储器互连系统', 'CPU-存储器总线', '/course-share/image/read/6-4-3'),
(110, '6-4-4 IO总线连接到存储器总线上的一种典型的组织结构', 'CPU-存储器总线，IO总线', '/course-share/image/read/6-4-4'),
(111, '6-5-1 通道完成一次数据传输的过程', '通道的工作过程，通道', '/course-share/image/read/6-5-1'),
(112, '6-5-2 通道程序、用户程序和管理程序之间的关系', '通道的工作过程，通道', '/course-share/image/read/6-5-2'),
(113, '6-5-3 三种类型的通道与CPU、设备控制器和外围设备的连接关系', '字节多路通道，数组多路通道，选择通道', '/course-share/image/read/6-5-3'),
(114, '6-5-4 字节多路通道的数据传送过程', '字节多路通道，通道流量', '/course-share/image/read/6-5-4'),
(115, '6-5-5 数组多路通道的数据传送过程', '数组多路通道，通道流量', '/course-share/image/read/6-5-5'),
(116, '6-5-6 选择通道的数据传送过程', '选择通道，通道流量', '/course-share/image/read/6-5-6'),
(117, '6-5-7 通道的流量分析', '字节多路通道，数组多路通道，选择通道', '/course-share/image/read/6-5-7'),
(118, '6-5-8 启动输入输出设备指令的工作流程', '通道，通道的工作过程', '/course-share/image/read/6-5-8'),
(119, '6-6-1 虚拟DMA的IO连接', '虚拟DMA', '/course-share/image/read/6-6-1'),
(120, '6-6-2 由IO导致的数据不一致的问题举例', 'IO与Cache的数据一致性', '/course-share/image/read/6-6-2'),
(121, '7-1-1 互连网络在系统中的位置', '互连网络', '/course-share/image/read/7-1-1'),
(122, '7-1-2 阵列计算机ILLIAC_Ⅳ', 'Illiac Ⅳ阵列处理机', '/course-share/image/read/7-1-2'),
(123, '7-2-1 静态互连网络一览表', '静态互连网络', '/course-share/image/read/7-2-1'),
(124, '7-2-2 一种由总线连接的多处理机系统', '总线', '/course-share/image/read/7-2-2'),
(125, '7-2-3 8×8的Omega网络', 'Omega网络', '/course-share/image/read/7-2-3'),
(126, '7-2-4 多级立方体网络', '超立方体', '/course-share/image/read/7-2-4'),
(127, '7-2-5 动态网络的比较', '动态互连网络', '/course-share/image/read/7-2-5'),
(128, '7-4-1 均匀混洗', '均匀洗牌函数', '/course-share/image/read/7-4-1'),
(129, '7-4-2 逆均匀混洗', '逆均匀洗牌函数', '/course-share/image/read/7-4-2'),
(130, '7-4-3 3-立方体', '立方体互连函数', '/course-share/image/read/7-4-3'),
(131, '7-4-4 根据最低位C0路由', '立方体互连函数', '/course-share/image/read/7-4-4'),
(132, '7-4-5 根据中间位C1路由', '立方体互连函数', '/course-share/image/read/7-4-5'),
(133, '7-4-6 根据最高位C2路由', '立方体互连函数', '/course-share/image/read/7-4-6'),
(134, '7-4-7 线性阵列', '静态互连网络，线性阵列', '/course-share/image/read/7-4-7'),
(135, '7-4-8 环', '静态互连网络，环', '/course-share/image/read/7-4-8'),
(136, '7-4-9 带弦环', '静态互连网络，带弦环', '/course-share/image/read/7-4-9'),
(137, '8-1-1 集中式共享存储器多处理机的基本结构', '集中式共享多处理机', '/course-share/image/read/8-1-1'),
(138, '8-1-2 分布式存储器结构的机器基本结构', '分布式共享多处理机', '/course-share/image/read/8-1-2'),
(139, '8-2-1 由两个处理器（A和B）读写引起的Cache一致性问题', '多Cache一致性', '/course-share/image/read/8-2-1'),
(140, '8-2-2 在写回cache的情况下，监听总线中写作废协议的实现', '多Cache一致性，写作废协议，监听协议', '/course-share/image/read/8-2-2'),
(141, '8-2-3 监听协议每个数据块的状态', '监听协议', '/course-share/image/read/8-2-3'),
(142, '8-3-1 对每个结点增加目录后的分布式存储器结构', '分布式共享多处理机，目录', '/course-share/image/read/8-3-1'),
(143, '8-3-2 本地结点、宿主结点以及远程结点的关系', '目录协议', '/course-share/image/read/8-3-2'),
(144, '8-3-3 全映象目录举例', '目录协议', '/course-share/image/read/8-3-3'),
(145, '8-3-4 有限映象目录举例', '目录协议', '/course-share/image/read/8-3-4'),
(146, '8-3-5 采用单向链法的链式目录举例', '目录协议', '/course-share/image/read/8-3-5'),
(147, '8-3-6 Snooping协议Cache状态转换图(对CPU请求的响应）', '监听协议', '/course-share/image/read/8-3-6'),
(148, '8-3-7 目录协议本地结点向宿主结点发送读失效消息', '目录协议', '/course-share/image/read/8-3-7'),
(149, '8-3-8 目录协议本地结点向宿主结点发送写失效消息', '目录协议', '/course-share/image/read/8-3-8'),
(150, '8-3-9 目录协议宿主结点向远程结点发送作废消息', '目录协议', '/course-share/image/read/8-3-9'),
(151, '8-5-1 多线程的3种情况', '同时多线程', '/course-share/image/read/8-5-1'),
(152, '8-5-2 在超标量处理器上增添8个线程的同时多线程能力时获得的性能提高', '同时多线程', '/course-share/image/read/8-5-2'),
(153, '8-5-3 SMT与基本的超标量处理器在几个主要指标上的对比', '同时多线程', '/course-share/image/read/8-5-3'),
(154, '8-5-4 超标量处理器不支持多线程技术的情况', '同时多线程', '/course-share/image/read/8-5-4'),
(155, '8-6-1 Origin系统结构', '多处理机实例Origin 2000', '/course-share/image/read/8-6-1'),
(156, '8-6-2 Origin系统两个结点互连的情况', '多处理机实例Origin 2000', '/course-share/image/read/8-6-2'),
(157, '8-6-3 由8结点构成的16处理器系统', '多处理机实例Origin 2000', '/course-share/image/read/8-6-3'),
(158, '8-6-4 128处理器系统', '多处理机实例Origin 2000', '/course-share/image/read/8-6-4'),
(159, '9-1-1 全球Top500中机群计算机的数量和比例', '机群', '/course-share/image/read/9-1-1'),
(160, '9-1-2 一个包含4个结点的简单PC机群', '机群', '/course-share/image/read/9-1-2'),
(161, '9-1-3 机群系统的软件框架', '机群', '/course-share/image/read/9-1-3'),
(162, '9-4-1 IBM_SP2的系统结构', 'IBM SP2机群', '/course-share/image/read/9-4-1'),
(163, '9-4-2 SP2的IO子系统的总体结构', 'IBM SP2机群', '/course-share/image/read/9-4-2');

--
-- Truncate table before insert `knowledge`
--

TRUNCATE TABLE `knowledge`;
--
-- Truncate table before insert `problem`
--

TRUNCATE TABLE `problem`;
--
-- Dumping data for table `problem`
--

INSERT INTO `problem` (`id`, `problem_type`, `difficulty`, `problem_content`, `key_content`, `knowledge`) VALUES
(1, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>多级层次结构</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>按照计算机语言从低级到高级的次序，把计算机系统按功能划分成多级层次结构，每一层以一种不同的语言为特征。这些层次依次为：微程序机器级，传统机器语言机器级，汇编语言机器级，高级语言机器级，应用语言机器级等。</span> </p>', '多级层次结构'),
(2, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>虚拟机</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>用软件实现的机器。</span> </p>', '虚拟机'),
(3, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>解释</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>对于高一级机器上的程序中的每一条语句或指令，都是转去执行低一级机器上的一段等效程序。执行完后，再去高一级机器取下一条语句或指令，再进行解释执行，如此反复，直到解释执行完整个程序。</span> </p>', '解释'),
(4, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>翻译</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>先用转换程序把高一级机器上的程序转换为低一级机器上等效的程序，然后再在这低一级机器上运行，实现程序的功能。</span> </p>', '翻译'),
(5, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机系统结构</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>传统机器程序员所看到的计算机属性，即概念性结构与功能特性。</span> </p>', '计算机系统结构'),
(6, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机组成</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机系统结构的逻辑实现，包含物理机器级中的数据流和控制流的组成以及逻辑设计等。</span> </p>', '计算机组成'),
(7, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机实现</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机组成的物理实现，包括处理机、主存等部件的物理结构，器件的集成度和速度，模块、插件、底板的划分与连接，信号传输，电源、冷却及整机装配技术等。</span> </p>', '计算机实现'),
(8, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>透明性</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>在计算机技术中，把这种本来存在的事物或属性，但从某种角度看又好像不存在的概念称为透明性。</span> </p>', '透明性'),
(9, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>系列机</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>由同一厂家生产的具有相同系统结构、但具有不同组成和实现的一系列不同型号的计算机。</span> </p>', '系列机'),
(10, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>最大并行度</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机系统在单位时间内能够处理的最大的二进制位数。</span> </p>', '最大并行度，冯氏分类法'),
(11, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>Amdahl定律</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>当对一个系统中的某个部件进行改进后，所能获得的整个系统性能的提高，受限于该部件的执行时间占总执行时间的百分比。</span> </p>', 'Amdahl定律，部件加速比，可改进比例，加速比'),
(12, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>CPI</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>每条指令的平均执行时钟周期数。</span> </p>', 'CPI'),
(13, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>程序的局部性原理</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>程序执行时所访问的存储器地址不是随机分布的，而是相对地簇聚。</span> </p>', '程序的局部性原理'),
(14, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>时间局部性</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>程序即将用到的信息很可能就是目前正在使用的信息。</span> </p>', '时间局部性，程序的局部性原理'),
(15, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>空间局部性</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>程序即将用到的信息很可能与目前正在使用的信息在空间上相邻或者临近。</span> </p>', '空间局部性，程序的局部性原理'),
(16, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>CISC</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>复杂指令集计算机。</span> </p>', 'CISC'),
(17, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>RISC</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>精减指令集计算机。</span> </p>', 'RISC'),
(18, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>软件兼容</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>一个软件可以不经修改或者只需少量修改就可以由一台计算机移植到另一台计算机上运行。差别只是执行时间的不同。</span> </p>', '软件兼容'),
(19, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>向上兼容</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>按某档计算机编制的程序，不加修改就能运行于比它高档的计算机。</span> </p>', '向上兼容，软件兼容'),
(20, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>向下兼容</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>按某档计算机编制的程序，不加修改就能运行于比它低档的计算机。</span> </p>', '向下兼容，软件兼容'),
(21, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>向前兼容</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>按某个时期投入市场的某种型号计算机编制的程序，不加修改地就能运行于在它之前投入市场的计算机。</span> </p>', '向前兼容，软件兼容'),
(22, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>向后兼容</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>按某个时期投入市场的某种型号计算机编制的程序，不加修改地就能运行于在它之后投入市场的计算机。</span> </p>', '向后兼容，软件兼容'),
(23, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>兼容机</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>由不同公司厂家生产的具有相同系统结构的计算机。</span> </p>', '兼容机'),
(24, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>摩尔定律</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>摩尔定律指出集成电路芯片上所集成的晶体管数目每隔18个月就翻一番。</span> </p>', '摩尔定律'),
(25, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>模拟</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>用软件的方法在一台现有的计算机（称为宿主机host）上实现另一台计算机（称为虚拟机）的指令系统。</span> </p>', '模拟'),
(26, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>仿真</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>用一台现有计算机（称为宿主机）上的微程序去解释实现另一台计算机（称为目标机）的指令系统。</span> </p>', '仿真'),
(27, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>并行性</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机系统在同一时刻或者同一时间间隔内进行多种运算或操作。只要在时间上相互重叠，就存在并行性。它包括同时性与并发性两种含义。</span> </p>', '并行性'),
(28, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>并发性</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>两个或两个以上的事件在同一时间间隔内发生。</span> </p>', '并发性，并行性'),
(29, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>同时性</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>两个或两个以上的事件在同一时刻发生。</span> </p>', '同时性，并行性'),
(30, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>时间重叠</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>在并行性概念中引入时间因素，让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。</span> </p>', '时间重叠'),
(31, '概念题', 2, '<p class=''p4'' style=''margin-left:-0.01875in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>资源重复</span> </p>', '<p class=''p4'' style=''margin-left:-0.01875in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>在并行性概念中引入空间因素，以数量取胜。通过重复设置硬件资源，大幅度地提高计算机系统的性能。</span> </p>', '资源重复'),
(32, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>资源共享</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>这是一种软件方法，它使多个任务按一定时间顺序轮流使用同一套硬件设备。</span> </p>', '资源共享'),
(33, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>耦合度</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>反映多机系统中各计算机之间物理连接的紧密程度和交互作用能力的强弱。</span> </p>', '耦合度'),
(34, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>紧密耦合系统</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>又称直接耦合系统。在这种系统中，计算机之间的物理连接的频带较高，一般是通过总线或高速开关互连，可以共享主存。</span> </p>', '紧密耦合系统，耦合度'),
(35, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>松散耦合系统</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>又称间接耦合系统，一般是通过通道或通信线路实现计算机之间的互连，可以共享外存设备（磁盘、磁带等）。计算机之间的相互作用是在文件或数据集一级上进行。</span> </p>', '松散耦合系统耦合度'),
(36, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>异构型多处理机系统</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>由多个不同类型、至少担负不同功能的处理机组成，它们按照作业要求的顺序，利用时间重叠原理，依次对它们的多个任务进行加工，各自完成规定的功能动作。</span> </p>', '异构型多处理机系统'),
(37, '概念题', 2, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>同构型多处理机系统</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>由多个同类型或至少担负同等功能的处理机组成，它们同时处理同一作业中能并行执行的多个任务。</span> </p>', '同构型多处理机系统'),
(38, '选择题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>直接执行微指令的是（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 汇编程序 B. 编译程序 C. 硬件 D. 微指令程序</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>C</span> </p>', '多级层次结构'),
(39, '选择题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>对汇编语言程序员不透明的是（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 程序计数器 B. 主存地址寄存器 C. 条件码寄存器 D. 指令寄存器</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>C</span> </p>', '透明性'),
(40, '选择题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>“由中间开始设计”的“中间”目前多数是在（ ）之间。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 传统机器级与操作系统之间 B. 传统机器级与微程序级之间</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>C. 操作系统与汇编语言级之间 D. 微程序级与汇编语言级之间</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>A</span> </p>', '多级层次结构'),
(41, '选择题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>最早的</span><span class=''s3'' style=''font-family:Times New Roman;color:black;''>冯&middot;诺依曼（Von Neumann）结构的计算机是以（ ）为中心的。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>A. 运算器 B. 控制器 C. 存储器 D. I/O设备</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>A</span> </p>', '冯·诺依曼结构'),
(42, '选择题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>从计算机系统结构来看，机器语言程序员看到的机器属性是（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 计算机软件所要完成的功能 B. 计算机硬件的全部组成</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>C. 编程要用到的硬件组织 D. 计算机各部件的硬件实现</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>C</span> </p>', '计算机系统结构'),
(43, '选择题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>不同系列的机器之间，实现可移植性的途径不包括（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 采用统一的高级语言 B. 采用统一的汇编语言 C. 模拟 D. 仿真</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>B</span> </p>', '程序可移植性，模拟，仿真'),
(44, '选择题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>利用时间重叠原理实现并行处理的是（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 流水处理机 B. 多处理机 C. 阵列处理机 D. 机群系统</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>A</span> </p>', '时间重叠'),
(45, '选择题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span>多处理机实现的并行主要是（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 指令级并行 B. 任务级并行 C. 操作级并行 D. 操作步骤的并行</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>B</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>@</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>并行性</span> </p>', '时间重叠'),
(46, '选择题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>计算机系统结构不包括（ ）。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>A. 信息保护 B. 主存速度 C. 数据表示 D. 机器工作状态</span> </p>', '<p class=''p6'' style=''text-align:justify;hyphenate:auto;font-family:黑体;font-size:12pt;''> <span>B</span> </p>', '计算机系统结构'),
(47, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>常见的计算机系统结构分类法有2种：</span><span>______、______。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>Flynn分类法、冯氏分类法</span> </p>', 'Flynn分类法，冯氏分类法'),
(48, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>冯氏分类法用系统的最大并行度对计算机进行分类，大多数传统的位并行单处理机属字</span><span>______</span><span class=''s1'' style=''color:black;''>位</span><span>______</span><span class=''s1'' style=''color:black;''>方式。</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span class=''s1'' style=''color:black;''>串、并</span> </p>', '冯氏分类法，最大并行度'),
(49, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>由软件实现的机器称为______。在一个计算机系统中，低层机器的属性对高层机器的程序员往往是______的。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>虚拟机器、透明</span> </p>', '虚拟机，透明性'),
(50, '填空题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>程序的局部性包含程序的______局部性和程序的______局部性。</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>时间、空间</span> </p>', '程序的局部性，时间局部性，空间局部性'),
(51, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>从多级层次结构出发，计算机系统可以有</span><span>______</span><span class=''s1'' style=''color:black;''>、</span><span>______</span><span class=''s1'' style=''color:black;''>和</span><span>______</span><span class=''s1'' style=''color:black;''>3种不同的设计方法。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>由上往下设计、由下往上设计、从中间开始设计</span> </p>', '多级层次结构'),
(52, '填空题', 3, '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span class=''s1'' style=''color:black;''>实现程序可移植性的主要途径有：</span><span class=''s4'' style=''font-family:Times New Roman;''>______</span><span class=''s1'' style=''color:black;''>、</span><span class=''s4'' style=''font-family:Times New Roman;''>______</span><span class=''s1'' style=''color:black;''>、</span><span class=''s4'' style=''font-family:Times New Roman;''>______</span><span class=''s1'' style=''color:black;''>和</span><span class=''s4'' style=''font-family:Times New Roman;''>______</span><span class=''s1'' style=''color:black;''> 。</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span class=''s1'' style=''color:black;''>统一高级语言、系列机、模拟、仿真</span> </p>', '程序可移植性，系列机，模拟，仿真'),
(53, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>为了在不同系统结构的机器之间实现软件移植，可采用______或______方法。</span> </p>', '<p class=''p2'' style=''text-align:justify;hyphenate:auto;font-family:宋体;font-size:10pt;''> <span class=''s1'' style=''color:black;''>模拟、仿真</span> </p>', '模拟，仿真'),
(54, '填空题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>软件兼容有______、______、______和______4种。其中______是软件兼容的根本特征。</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>向上兼容、向下兼容、向前兼容、向后兼容、向后兼容</span> </p>', '软件兼容，向上兼容，向下兼容，向前兼容，向后兼容，向后兼容'),
(55, '填空题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>广义来说，并行性既包含______性，又包含______性。</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>同时、并发</span> </p>', '并行性，并发性，同时性'),
(56, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>从执行程序的角度看，并行性等级从低到高可分为______并行、______并行、______并行、______并行和______并行。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>指令内部、指令级、</span><span class=''s1'' style=''color:black;''>线程级并行、</span><span>任务级或过程级、作业或程序级</span> </p>', '并行性'),
(57, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>从处理数据的角度，并行性等级从低到高可以分为______、______、______和______4种。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>字串位串、字串位并、字并位串、全并行</span> </p>', '并行性'),
(58, '填空题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>计算机系统中提高并行性的技术途径有______、______和______3种。在高性能单处理机的发展中，起主导作用的是______这个途径，它的实现基础是______。</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>时间重叠、资源重复、资源共享、时间重叠、部件功能专用化</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>@并行性，时间重叠，资源重复，资源共享</span> </p>', '并行性'),
(59, '填空题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>多机系统的耦合度可以分为______和______。</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>松散耦合、紧密耦合</span> </p>', '耦合度，松散耦合，紧密耦合'),
(60, '填空题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>同构型多处理机和异构型多处理机所采用的提高并行性的技术途径分别是______和______。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>资源重复、时间重叠</span> </p>', '同构型多处理机，异构型多处理机，资源重复，时间重叠'),
(61, '问答题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>试用实例说明计算机系统结构、计算机组成与计算机实现之间的相互关系。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>如在设计主存系统时，确定主存容量、编址方式、寻址范围等属于计算机系统结构。确定主存周期、逻辑上是否采用并行主存、逻辑设计等属于计算机组成。选择存储芯片类型、微组装技术、线路设计等属于计算机实现。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>计算机组成是计算机系统结构的逻辑实现。计算机实现是计算机组成的物理实现。一种系统结构可以有多种组成。一种组成可以有多种实现。</span> </p>', '计算机系统结构，计算机组成，计算机实现'),
(62, '问答题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>Flynn分类法是按照什么把计算机系统的结构分为哪4类？</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>Flynn分类法是按照指令流和数据流的多倍性进行分类。把计算机系统的结构分为：</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s5'' style=''display: inline-block; text-indent: 0; min-width: 0.4861111in;''>（1）​&nbsp;</span><span class=''s1'' style=''color:black;''>单指令流单数据流SISD</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s5'' style=''display: inline-block; text-indent: 0; min-width: 0.4861111in;''>（1）​&nbsp;</span><span class=''s1'' style=''color:black;''>单指令流多数据流SIMD</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s5'' style=''display: inline-block; text-indent: 0; min-width: 0.4861111in;''>（1）​&nbsp;</span><span>多指令流单数据流MISD</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s5'' style=''display: inline-block; text-indent: 0; min-width: 0.4861111in;''>（1）​&nbsp;</span><span>多指令流多数据流MIMD</span> </p>', 'Flynn分类法'),
(63, '问答题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>冯氏分类法是根据什么对计算机进行分类。</span><span>把计算机分成哪4类？</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>冯氏分类法是用系统的最大并行度对计算机进行分类。</span><span>把计算机分成4类具有不同最大并行度的计算机系统结构：</span> </p><p class=''p8'' style=''text-indent:0.31041667in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（1</span><span class=''s1'' style=''color:black;''>）字串位串：这是第一代计算机发展初期的纯串行计算机。</span> </p><p class=''p8'' style=''text-indent:0.31041667in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（2）字串位并：这是传统的单处理机，同时处理单个字的多个位。</span> </p><p class=''p8'' style=''text-indent:0.31041667in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（3）字并位串：</span><span>同时处理多个字的同一位（位片）。</span> </p><p class=''p8'' style=''text-indent:0.31041667in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（4）字并位并：同时处理多个字的多个位。</span> </p>', '冯氏分类法'),
(64, '问答题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机系统设计中经常使用的4个定量原理是什么？并说出它们的含义。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（1）</span><span class=''s1'' style=''color:black;''>以经常性事件为重点</span><span>。</span><span class=''s1'' style=''color:black;''>在计算机系统的设计中，对经常发生的情况</span><span>，赋予它优先的处理权和资源使用权，以</span><span class=''s1'' style=''color:black;''>得到更多的总体上的改进</span><span>。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（2）Amdahl定律。加快某部件执行速度所获得的系统性能加速比，受限于该部件在系统中所占的重要性。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（3）</span><span class=''s1'' style=''color:black;''>CPU性能公式。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>执行一个程序所需的CPU时间 = </span><span class=''s6'' style=''font-style:italic;color:black;''>IC</span><span class=''s1'' style=''color:black;''> &times;</span><span class=''s6'' style=''font-style:italic;color:black;''>CPI</span><span class=''s1'' style=''color:black;''> &times;时钟周期时间</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（4）程序的局部性原理。程序在执行时所访问地址的分布不是随机的，而是相对地簇聚。</span> </p>', 'Amdahl定律，CPU性能公式，IC，CPI，程序的局部性原理'),
(65, '问答题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算机系统“由中间开始设计”，其“中间”指的是什么地方？这样设计的好处是什么？</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>“中间”指的是多级层次结构中的软硬件交界面，即传统机器级与操作系统机器级之间。</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>这样设计，能合理地进行软硬件的功能分配，优化软硬件设计，可为软件和应用提供更多更好地支持；软件和硬件并行设计可以缩短设计周期。</span> </p>', '多级层次结构'),
(66, '问答题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>硬件和软件在什么意义上是等效的？在什么意义上是不等效的？ </span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>硬件和软件在实现逻辑功能上是等效的。在原理上，用软件实现的功能完全可以用硬件或固件来实现；用硬件实现的功能也可以用软件进行模拟完成。</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>但在速度、价格、实现的难易程度上是不同的。</span><span class=''s1'' style=''color:black;''>对于任何一种功能来说，用软件实现的优点是设计容易、修改简单，而且可以减少硬件成本。但其缺点是所实现的功能的速度较慢。用硬件实现的优点是速度快、性能高，但它修改困难，灵活性差。</span> </p>', '计算机系统结构'),
(67, '问答题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>存储程序计算机在系统结构上的主要特点是什么？</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（1）机器以运算器为中心。（2）采用存储程序原理。程序（指令）和数据放在同一存储器中，并且没有对两者加以区分。指令和数据一样可以送到运算器进行运算，即由指令组成的程序自身是可以修改的。（3）存储器是按地址访问的、线性编址的空间。（4）控制流由指令流产生。（5）指令由操作码和地址码组成。操作码指明本指令的操作类型，地址码指明操作数和操作结果的地址。（6）数据以二进制编码表示，采用二进制运算。</span> </p>', '冯·诺依曼结构'),
(68, '问答题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>系列机概念对计算机发展有什么意义？系列机软件兼容的基本要求是什么？列出几个你所熟知的系列机。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>系列机可以实现系统结构相同的计算机之间的软件移植。它</span><span>较好地解决了软件开发要求系统结构相对稳定与器件、硬件技术迅速发展的矛盾。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>系列机软件兼容的基本要求是保证向后兼容，力争向上兼容。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>IBM公司的IBM370系列，Intel公司的x86系列都是较典型的系列机。</span> </p>', '系列机，软件兼容，向后兼容，向上兼容'),
(69, '综合题', 4, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>假设有一个计算机系统分为二级，第一级指令比第二级指令在功能上强X倍，即一条第一级指令能够完成X条第二级指令的工作，且一条第一级指令需要Y条第二级指令解释。对于一段在第一级执行时间为N的程序，在第二级上的一段等效程序需要执行多少时间？</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/1'' style=''width:5.7611113in;height:1.25625in;vertical-align:text-bottom;'' /></p>', '多级层次结构'),
(70, '综合题', 4, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>某台主频为400MHz的计算机执行标准测试程序，程序中指令类型、执行数量和平均时钟周期数如下表所示。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/2'' style=''width:5.1590276in;height:1.5541667in;vertical-align:text-bottom;'' /></p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>求该计算机的有效CPI、MIPS和程序执行时间。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>解：（1）CPI ＝(45000&times;1＋75000&times;2＋8000&times;4＋1500&times;2) / 129500＝1.776</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（2）MIPS速率＝f/ CPI ＝400/1.776 ＝225.225MIPS</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>（3）程序执行时间= (45000&times;1＋75000&times;2＋8000&times;4＋1500&times;2)／400=575s</span> </p>', 'CPI，MIPS，执行时间'),
(71, '综合题', 4, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>假设处理机的时钟频率为40MHz，运行的测试程序共有200000条指令，由4类指令组成。已知各类指令的CPI和各类指令条数的比例如下表。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/3'' style=''width:4.8in;height:1.7736111in;vertical-align:text-bottom;'' /></p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>计算处理机运行该测试程序的CPI和MIPS。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/4'' style=''width:5.5375in;height:0.9097222in;vertical-align:text-bottom;'' /></p>', 'CPI，MIPS'),
(72, '综合题', 4, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>计算机系统有3个部件可以改进，这3个部件的加速比如下：</span> </p><p class=''p9'' style=''margin-left:0.29166666in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span> 部件加速比S</span><span class=''s7'' style=''vertical-align:sub;font-size:smaller;''>1</span><span>＝30； 部件加速比S</span><span class=''s7'' style=''vertical-align:sub;font-size:smaller;''>2</span><span>＝20； 部件加速比S</span><span class=''s7'' style=''vertical-align:sub;font-size:smaller;''>3</span><span>＝10；</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>(1) 如果部件1和部件2的可改进比例为30％，那么当部件3的可改进比例为多少时，系统的加速比才可以达到10？</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>(2) 如果3个部件的可改进比例分别为30％、30％和20％，3个部件同时改进，那么系统中不可改进部分的执行时间在总执行时间中占的比例是多少？</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/5'' style=''width:5.757639in;height:5.9263887in;vertical-align:text-bottom;'' /></p>', 'Amdahl定律，部件加速比，可改进比例'),
(73, '综合题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>将计算机系统中某一功能的处理速度加快20倍，但该功能的处理时间仅占整个系统运行时间的40%，则采用此增强功能方法后，能使整个系统的性能提高多少？</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/6'' style=''width:5.1534724in;height:1.4243056in;vertical-align:text-bottom;'' /></p>', 'Amdahl定律，部件加速比，可改进比例'),
(74, '综合题', 3, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>某计算机系统采用浮点运算部件后，使浮点运算速度提高到原来的20倍，而系统运行某一程序的整体性能提高到原来的5倍，试计算该程序中浮点操作所占的比例</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>解：由题可知： 部件加速比 = 20 系统加速比 = 5</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>根据Amdahl定律可知：</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/7'' style=''width:3.0840278in;height:0.8055556in;vertical-align:text-bottom;'' /></p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>由此可得：可改进比例 = 84.2% </span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>即程序中浮点操作所占的比例为84.2%。</span> </p>', 'Amdahl定律，部件加速比，可改进比例');
INSERT INTO `problem` (`id`, `problem_type`, `difficulty`, `problem_content`, `key_content`, `knowledge`) VALUES
(75, '综合题', 4, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>假设我们考虑条件分支指令的两种不同设计方法：</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（1）CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>：通过比较指令设置条件码，然后测试条件码进行分支。</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（2）CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>：在分支指令中包括比较过程。</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>在这两种CPU中，条件分支指令都占用2个时钟周期，而所有其它指令占用1个时钟周期。对于CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>，执行的指令中分支指令占20%；由于每条分支指令之前都需要有比较指令，因此比较指令也占20%。由于CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>在分支时不需要比较，因此CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>的时钟周期时间是CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>的1.25倍。问：哪一个CPU更快？如果CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>的时钟周期时间只是CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>的1.1倍，哪一个CPU更快呢？</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>解：我们不考虑所有系统问题，所以可用CPU性能公式。占用2个时钟周期的分支指令占总指令的20%，剩下的指令占用1个时钟周期。所以</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>CPI</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A </span><span class=''s1'' style=''color:black;''>= 0.2 2 + 0.80 1 = 1.2</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>则CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>性能为：</span> </p><p class=''p12'' style=''margin-left:0.31111112in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>总CPU时间</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''> = IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''> 1.2 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>根据假设，有：</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> = 1.25 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>在CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>中没有独立的比较指令，所以CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>的程序量为CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>的80%，分支指令的比例为：</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>20%/80% = 25%</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>这些分支指令占用2个时钟周期，而剩下的75%的指令占用1个时钟周期，因此：</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>CPI</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B </span><span class=''s1'' style=''color:black;''>= 0.25 2 + 0.75 1 = 1.25</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>因为CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>不执行比较，故：</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> = 0.8 IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>因此CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>性能为：</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>总CPU时间</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> = IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> CPI</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span> </p><p class=''p13'' style=''margin-left:1.25in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>= 0.8 IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''> 1.25 （1.25 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>）</span> </p><p class=''p13'' style=''margin-left:1.25in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>= 1.25 IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''> 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>在这些假设之下，尽管CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>执行指令条数较少，CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>因为有着更短的时钟周期，所以比CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>快。</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>如果CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>的时钟周期时间仅仅是CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>的1.1倍，则</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> = 1.10 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>的性能为：</span> </p><p class=''p11'' style=''margin-left:0.3in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>总CPU时间</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> = IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> CPI</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''> </span> </p><p class=''p13'' style=''margin-left:1.25in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>= 0.8 IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''> 1.25 （1.10 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>）</span> </p><p class=''p13'' style=''margin-left:1.25in;text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>= 1.10 IC</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''> 时钟周期</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>因此CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>B</span><span class=''s1'' style=''color:black;''>由于执行更少指令条数，比CPU</span><span class=''s8'' style=''color:black;vertical-align:sub;font-size:smaller;''>A</span><span class=''s1'' style=''color:black;''>运行更快。</span> </p>', 'CPU性能公式，IC，CPI'),
(76, '综合题', 4, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>假设某应用程序中有4类操作，通过改进，各操作获得不同的性能提高。具体数据如下表所示：</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/8'' style=''width:5.763889in;height:1.2465278in;vertical-align:text-bottom;'' /><span class=''s1'' style=''color:black;''>（1）改进后，各类操作的加速比分别是多少？</span> </p><p class=''p14'' style=''text-indent:-0.375in;margin-left:0.375in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（2）各类操作单独改进后，程序获得的加速比分别是多少？</span> </p><p class=''p14'' style=''text-indent:-0.375in;margin-left:0.375in;text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（3）4类操作均改进后，整个程序的加速比是多少？</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/9'' style=''width:5.736111in;height:3.1527777in;vertical-align:text-bottom;'' /></p>', 'Amdahl定律，加速比'),
(77, '综合题', 4, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>某个处理机的时钟频率为15MHz，执行测试程序的速率为10MIPS，假设每次存储器存取需1个时钟周期的时间。 </span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（1）求处理机的CPI值。</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>（2）假设将处理机的时钟频率提高到30MHz，但存储器的工作速率不变，这使得每次存储器存取需2个时钟周期。如果测试程序中30%的指令需要1次访存，5%的指令需要2次访存，其它指令不需要访存，求该测试程序在改进后的处理机上执行的MIPS。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/10'' style=''width:5.947222in;height:2.2708333in;vertical-align:text-bottom;'' /><span>@3</span> </p><p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>CPI，</span><span class=''s1'' style=''color:black;''>MIPS</span> </p>', 'Amdahl定律，加速比'),
(78, '综合题', 4, '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span class=''s1'' style=''color:black;''>假设浮点数指令FP指令的比例为30%，其中浮点数平方根FPSQR占全部指令的比例为4%，FP操作的CPI为5，FPSQR操作的CPI为20 ，其它指令的平均CPI为1.25。现有两种改进方案，第一种是把FPSQR操作的CPI减至3，第二种是把所有的FP操作的CPI减至3，试比较两种方案对系统性能的提高程度。</span> </p>', '<p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/11'' style=''width:6.140278in;height:2.3145833in;vertical-align:text-bottom;'' /><span>@3</span> </p><p class=''p7'' style=''text-align:start;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>CPI</span> </p>', 'Amdahl定律，加速比'),
(79, '综合题', 3, '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <span>若在整个测试程序的执行时间中，求浮点数平方根FPSQR的操作占10%。现有两种改进方案：（1）采用FPSQR硬件，使其速度加快到10倍；（2）使所有浮点数指令FP速度加快到4倍，并设FP指令占整个程序执行时间的40%。试比较两种方案的优劣。</span> </p>', '<p class=''p1'' style=''text-align:justify;hyphenate:auto;font-family:Times New Roman;font-size:10pt;''> <img src=''/course-share/problemset/resource/12'' style=''width:4.69375in;height:2.2479167in;vertical-align:text-bottom;'' /></p>', 'Amdahl定律');

--
-- Truncate table before insert `problem_resource`
--

TRUNCATE TABLE `problem_resource`;
--
-- Dumping data for table `problem_resource`
--

INSERT INTO `problem_resource` (`id`, `type`, `uri`) VALUES
(1, 'jpg', '/var/tmp/course-share/problems/resources'),
(2, 'jpg', '/var/tmp/course-share/problems/resources'),
(3, 'jpg', '/var/tmp/course-share/problems/resources'),
(4, 'jpg', '/var/tmp/course-share/problems/resources'),
(5, 'jpg', '/var/tmp/course-share/problems/resources'),
(6, 'jpg', '/var/tmp/course-share/problems/resources'),
(7, 'jpg', '/var/tmp/course-share/problems/resources'),
(8, 'jpg', '/var/tmp/course-share/problems/resources'),
(9, 'jpg', '/var/tmp/course-share/problems/resources'),
(10, 'jpg', '/var/tmp/course-share/problems/resources'),
(11, 'jpg', '/var/tmp/course-share/problems/resources'),
(12, 'jpg', '/var/tmp/course-share/problems/resources');

--
-- Truncate table before insert `resource`
--

TRUNCATE TABLE `resource`;
--
-- Truncate table before insert `subject`
--

TRUNCATE TABLE `subject`;
--
-- Dumping data for table `subject`
--

INSERT INTO `subject` (`id`, `name`, `description`, `subject_name`, `url`) VALUES
(1, 'Peer-to-Peer 综述', '这篇论文介绍了P2P网络的拓扑结构、搜索技术、应用研究等方面的研究现状。', 'P2P', 'http://www.intsci.ac.cn/users/luojw/P2P/'),
(2, 'Napster官方网站', '第一款P2P软件的官方网站。', 'P2P', 'http://www.napster.com/'),
(3, 'KaZaA官方网站', '混合式P2P结构KaZaA的官方网站。', 'P2P', 'http://www.kazaa.com/'),
(4, 'Gnutella协议', '这篇论文介绍了无结构化P2P网络Gnutella的拓扑结构和相关协议。', 'P2P', 'http://www.stanford.edu/class/cs244b/gnutella_protocol_0.4.pdf'),
(5, 'Random Walks协议', '这篇论文介绍了无结构化P2P网络的Random Walks路由协议。', 'P2P', 'http://www.stanford.edu/~saberi/rwp2p.pdf'),
(6, 'Chord 工程', '这个网站介绍了环形的结构化P2P网络。', 'P2P', 'http://pdos.csail.mit.edu/chord/'),
(7, 'CAN协议', '这篇论文介绍了n维笛卡尔空间的结构化P2P网络。', 'P2P', 'http://www.ece.uc.edu/~oscar/p2parea/network/can_sigcomm.pdf'),
(8, 'Pastry 工程', '介绍了可扩展的结构化P2P网络的对象定位和路由协议。', 'P2P', 'http://research.microsoft.com/~antr/PAST/pastry.pdf'),
(9, 'Tapestry 工程', '这篇论文介绍了结构化P2P容错查找和路由基础平台。', 'P2P', 'http://pdos.csail.mit.edu/~strib/docs/tapestry/tapestry_jsac03.pdf'),
(10, 'Chimera工程 ', '这个网站介绍了一个结合Pastry和Taperstry的P2P网络工具。', 'P2P', 'http://current.cs.ucsb.edu/projects/chimera/'),
(11, 'SDDS介绍', '这个网站一种可扩展、容错的集群结构。', 'P2P', 'http://www.usenix.org/events/osdi00/full_papers/gribble/gribble_html/dds.html'),
(12, 'OceanStore工程', '这个网站介绍了一个分布式存储工程项目。', 'P2P', 'http://oceanstore.cs.berkeley.edu/info/overview.html'),
(13, 'Sylvia Ratnasamy博士的论文', '这个网站介绍了Sylvia Ratnasamy博士多篇关于P2P的论文。', 'P2P', 'http://www.icir.org/sylvia/'),
(14, 'P2P系统路由综述', '这篇论文介绍了P2P系统路由方面的研究现状。', 'P2P', 'http://cseweb.ucsd.edu/classes/fa01/cse221/projects/group15.pdf'),
(15, 'P2P文件共享研究', '这篇论文介绍了P2P文件共享方面的研究。', 'P2P', 'http://homes.cs.washington.edu/~gribble/papers/mmcn.pdf'),
(16, '小世界现象', '这篇论文介绍了网络中存在的小世界现象。', 'P2P', 'http://labs.yahoo.com/files/w_s_NATURE_0.pdf'),
(17, 'Mapping the Gnutella Network: Properties of Large-Scale Peer-to-Peer Systems and Implications for System Design ', '这篇论文对Gnutella网络的拓扑结构进行了分析，对其性能进行了定量评估，并对P2P网络系统的结构提出了设计方法。', 'P2P', 'http://arxiv.org/ftp/cs/papers/0209/0209028.pdf'),
(18, 'Making Gnutella-like P2P Systems Scalable', '这篇论文对Gnutella协议进行了改进，提出了覆盖网拓扑动态自适应机制和资源搜索算法，并完成了原型系统的实现和部署。', 'P2P', 'http://dcg.ethz.ch/lectures/ws0506/seminar/papers/scalable_p2p.pdf'),
(19, 'Efficient Content Location Using Interest-Based Locality in Peer-to-Peer Systems', '这篇论文提出了一种基于兴趣的P2P资源搜索算法，建立结点之间的兴趣短链，提高了搜索的效率。', 'P2P', 'http://www.cs.cmu.edu/afs/cs.cmu.edu/project/phrensy/pub/papers/SripanidkulchaiMZ03.ps'),
(20, 'Characterizing unstructured overlay topologies in modern p2p file-sharing systems', '这篇论文对无结构化P2P文件共享系统的拓扑结构进行分析，发现了网络拓扑结构显示出短链和小世界特征。', 'P2P', 'http://conferences.sigcomm.org/imc/2005/papers/imc05efiles/stutzbach/stutzbach.pdf'),
(21, '中国国家网格', '中国国家网格的官方网站。', '网格计算', 'http://www.cngrid.org/'),
(22, '欧洲网格基础设施', '欧洲网格基础设施的官方网站。', '网格计算', 'http://www.egi.eu/'),
(23, 'SETI@home工程', '这个网站是SETI@home项目的网站。SETI@home是一项利用全球联网的计算机共同搜寻地外文明（SETI）的科学实验计划。任何人都可以通过运行一个免费程序下载并分析从射电望远镜传来的数据来加入这个项目。', '网格计算', 'http://setiathome.berkeley.edu/'),
(24, 'Folding@home工程', '这个网站是Folding@home项目的网站。Folding@home是使用联网式的计算方式和大量的分布式计算能力来模拟蛋白质折叠过程的项目。全球已有27万用户加入到这个全球最大的超级计算机项目中。', '网格计算', 'http://folding.stanford.edu/'),
(25, 'APAN工程', '这个网站是亚太先进网络APAN的网站。APAN由17个亚太地区国家或地区近40多个成员组成，其宗旨是建立和协调亚太地区下一代学术网络高速互联网研究实验环境。', '网格计算', 'http://www.apan.net/'),
(26, 'Open Science Grid工程', '这个网站是开放科学网格OSG项目的网站。OSG是科学研究使用的一个分布式计算基础设施。OSG 联盟是惟一一个由各大学、国家实验室、科学协作组织和软件开发人员将海量计算和存储资源组成一个共享的统一网络基础设施的联盟。', '网格计算', 'http://www.opensciencegrid.org/'),
(27, 'DutchGrid工程', '这个网站是DutchGrid项目的网站。DutchGrid作为一个学术和研究网格计算的开放平台，为荷兰的网格用户提供了可全球识别的身份证书。', '网格计算', 'http://www.dutchgrid.nl/'),
(28, 'EGEE工程', '这个网站是Enabling Grids for E-science （EGEE）项目的网站。EGEE项目将来自32个国家的90多个机构的科学家和工程师组织在一起，为科学家使用的电子科学（e-scinece）提供了一个无缝的网格基础设施。', '网格计算', 'http://www.eu-egee.org'),
(29, 'SAMGrid工程', '这个网站是SAMGRID项目的网站。SAMGrid是一个通用数据处理系统，它被设计为用来测试大量数据（PB级）集和广泛分布的产品和分析工具的一个关键设备。', '网格计算', 'http://projects.fnal.gov/samgrid/'),
(30, 'OGSA-DAI工程', '这个网站是OGSA-DAI项目的网站。OGSA-DAI项目着重关注的是中间件的开发，从而有助于对网格中不同来源的数据进行访问和集成。', '网格计算', 'http://www.ogsadai.org.uk/'),
(31, 'BOINC工程', '这个网站是BONIC项目的网站。Berkeley Open Infrastructure for Network Computing （BOINC）是一个软件平台，例如 distributed.net 和 SETI@home项目都在该平台运行。', '网格计算', 'http://boinc.berkeley.edu/'),
(32, 'Globus工程', '这个网站是Globus项目的网站。Globus是一种用于构建计算网格的开放体系结构、开放标准的项目。', '网格计算', 'http://www.globus.org/'),
(33, 'TeraGrid工程 ', '这个网站是TeraGrid项目的网站。TeraGrid是由National Science Foundation创建的一个开放科学研究基础组织。将9个合作站点的业界领先的资源组合起来，TeraGrid 创建了一个集成的持久计算资源。', '网格计算', 'http://teragrid.org/'),
(34, 'iVDGL工程', '这个网站是国际虚拟数据网格iVDGL项目的网站。iVDGL是一个全球的数据网格，用于物理和天文领域的前沿实验。', '网格计算', 'http://www.ivdgl.org/'),
(35, 'NorduGrid工程', '这个网站是NorduGrid项目的网站。NorduGrid中间件，是一个按照GPL许可发布的开源软件解决方案，可以实现保证产品质量的计算和数据网格。', '网格计算', 'http://www.nordugrid.org/middleware/'),
(36, 'UNICORE工程', '这个网站是UNICORE项目的网站。Uniform Interface to Computing Resources（UNICORE）提供了一个可随时运行的网格系统，包括客户机和服务器软件。UNICORE让分布的计算和数据资源在内部网和互联网上以一种无缝的安全方式使用。', '网格计算', 'http://www.unicore.eu/'),
(37, 'What is the Grid? A Three Point Checklist', '这篇论文提出了是成为网格的重要标准。', '网格计算', 'http://dlib.cs.odu.edu/WhatIsTheGrid.pdf'),
(38, 'The Open Grid Services Architecture', '这篇论文提出了一个开放网格服务的架构。', '网格计算', 'http://www.ogf.org/documents/GFD.80.pdf'),
(39, 'Dynamic Network Resources Allocation in Grids through a Grid Network Resource Broker', '这篇论文提出了一个使用网络资源代理进行网格资源动态调度的方法。', '网格计算', 'http://link.springer.com/content/pdf/10.1007%2F978-0-387-09663-6_7.pdf'),
(40, 'Wide Area Data Replication for Scientific Collaborations', '这篇论文提出了一种网格环境下的数据复制服务，并在Globus平台上实现了数据复制服务。', '网格计算', 'http://www.isi.edu/~annc/papers/ijhpcn2006.pdf'),
(41, 'Science Clouds: Early Experiences in Cloud Computing for Scientific Applications', '这篇文档对科学项目云技术进行了描述，并对早期经验做了总结。', '云计算', 'http://www.citeulike.org/user/jgallard/article/5975692'),
(42, 'Phoenix?Cloud: Consolidating Different Computing Loads on Shared Cluster System for Large Organization', '在论文中，作者设计运行了software-phoenix云管理系统，在共享的集群系统中整合异构的计算负载。进一步，作者还提出了供大组织和他附属部门共享集群系统的合作资源提供和管理策略。Phoenix Cloud减少了系统的规模。', '云计算', 'http://arxiv.org/abs/0906.1346'),
(43, 'Cloud Computing and Grid Computing 360-Degree Compared', 'Ian Foster比较对比了云计算和网格计算的各方面，并给出了两者的本质特征。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4738445&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4738445'),
(44, 'Toward a Unified Ontology of Cloud Computing', '这篇文章把云模型分为5层，解释了他们的内在关系，本文的贡献是第一个对云模型建立本体。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4738443&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4738443'),
(45, 'The Cumulus Project: Build a Scientific Cloud for a?Data?Center', '介绍了Cumulus工程的各个方面，如实验床，基础设施，中间件和应用程序模型。', '云计算', 'http://www.cca08.org/speakers/wang.html'),
(46, 'The Eucalyptus Open-source Cloud-computing System', 'Eucalyptus是一个云计算开源的软件框架，该文概述了它设计的基本原则，简单易于使用而且能模块化。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5071863&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5071863'),
(47, 'GridBatch: Cloud Computing for Large-Scale Data-Intensive Batch Applications', 'GridBatch系统为解决在云计算下的大规模精密数据批处理问题，GridBatch是一个编程模型，用户能控制数据的分割，控制计算怎么被分布的，最后给出一个例子，展示了它在EC2下的高性能。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4534231&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4534231'),
(48, 'Cost-Benefit Analysis of Cloud Computing versus Desktop Grids', '分析对比了采用云计算模型和桌面电脑组成的网格模型在性能和成本收益方面的优劣。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5160911&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5160911'),
(49, 'Programming Abstractions for Clouds', '本文讨论了云应用程序编程面临的挑战与发展，通过几个应用程序的讨论，演示了可能的解决方案。同时讨论了怎样正确使用抽象的编程接口，框架使其更有效，可扩展，最重要的独立于系统，这些接口框架支持普通的编程执行模式。', '云计算', 'http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.157.6615'),
(50, 'The RESERVOIR Model and Architecture for Open Federated Cloud Computing', '本文提出了RESERVOIR工程，它是一个体系结构，它允许云基础设施的提供者动态的和其它云设施成为伙伴，从而构成一个无限的信息资源池，同时不同的云设施保证它自己技术和商业管理决定高度自治。', '云计算', 'http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.156.7080'),
(51, 'Sector and Sphere: The Design and Implementation of a High Performance Data Cloud', '在这篇论文中，作者介绍了一个新的云计算软件，它包括Sector存储云和Sphere计算云。对比现有的数据云，Sector不但支持作为数据中心的数据存储，而且可以在广域网上进行数据分发。Sphere执行流处理示例，从而支持数据密集型的应用。Sphere支持所有能用MapReduce完成的应用，Sphere更简单更容易使用。根据作者的实验研究，它的速度是Hadoop的两倍。', '云计算', 'arxiv.org/pdf/0809.1181'),
(52, 'Adapting MapReduce for Dynamic Environments Using a Peer-to-Peer Model', '本文作者描述基于P2P的MapReduce的体系结构，概述了在JXTA框架下的运行情况。', '云计算', 'http://www.citeulike.org/user/xeon123/article/10287432'),
(53, 'Parallelizing bioinformatics applications with MapReduce', '本文讲了采用mapreduce技术来完成并行的生物分析的一个应用。本文的这个应用是在Hadoop下完成的，讲了两个算法，一个用于支持大规模数据集的流计算，一个用于计算小数据集的策略。', '云计算', 'http://www.citeulike.org/user/agbiotec/article/4061343'),
(54, 'Do Clouds Compute? A Framework for Estimating the Value of Cloud Computing', '在这篇论文中，作者讨论了云计算中的核心组件，以及在框架中构建组件，这个框架能帮助决策者评估云计算的成本，对比传统解决方案和云计算方案在成本上的差异。', '云计算', 'http://link.springer.com/chapter/10.1007%2F978-3-642-01256-3_10#page-1'),
(55, 'Using Transaction Based Parallel Computing to Solve Image Processing and Computational Physics Problems', '本文讲了在Hadoop下用并行计算来解决图像处理和计算物理学的问题。', '云计算', 'http://www.chinacloud.cn/show.aspx?id=1380&cid=28'),
(56, '?All-Pairs: An Abstraction for Data-Intensive Cloud Computing', '本文提出形成产品的系统应该为终端用户提供高度抽象的使用方法，以便容易表达，对于精密数据的工作量能高效的执行。文中提出了一个抽象的例子，all-pairs，它满足精密数据科学应用的需要。', '云计算', 'http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.113.2229'),
(57, 'Seattle: A Platform for Educational Cloud Computing', '本文介绍了用于教育界的云计算平台。讲了它的体系，部署，对于学生和教师的使用概况。', '云计算', 'http://dl.acm.org/citation.cfm?id=1508905&bnc=1'),
(58, 'Cloud Cube Model: Selecting Cloud Formations for Secure Collaboration', '本文解释了不同云的构成，详述了每种云构成的特征，优势和风险。', '云计算', 'http://www.citeulike.org/user/jluna/article/4785859'),
(59, 'CloudAV: N-Version Antivirus in the Network Cloud', '本文提出了一种在终端主机上检测恶意病毒的新模型。这种检测是基于提供防病毒软件作为一个云网络服务。作者构建配置了云防病毒系统，CloudAV，它包括轻量级跨平台的主机代理，一个由十个防病毒软件引擎构成的网络服务，和两个检测引擎。经过测试有很好的性能。', '云计算', 'http://dl.acm.org/citation.cfm?id=1496718'),
(60, 'Implementation Issues of A Cloud Computing Platform', '本文在对GFS研究的基础上，设计出可变块大小的兼容文件系统，以便大数据的处理。同时介绍了对MapReduce的改进以增加系统的吞吐量。', '云计算', 'http://www.techrepublic.com/resource-library/whitepapers/implementation-issues-of-a-cloud-computing-platform/'),
(61, '?Amdahl''s Law in the.?Multicore?Era', '多核时代下的Amdahl定律', '多核', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4563876&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4563876'),
(62, 'From a Few Cores to Many: A Tera-scale Computing Research Overview', '多核和众核的前瞻技术介绍', '多核', 'ftp://download.intel.com/research/platform/terascale/terascale_overview_paper.pdf'),
(63, 'Thousand Core Chips—A Technology Perspective', '片上众核的技术介绍', '多核', 'http://impact.asu.edu/cse520fa07/reference/borkar-DAC-07.pdf'),
(64, 'The Impact of Performance Asymmetry in Emerging Multicore Architectures', '多核架构上的性能分析论文', '多核', 'http://pages.cs.wisc.edu/~mscalar/papers/2005/isca2005-performance-asymmetry.pdf'),
(65, 'Single-ISA Heterogeneous Multi-Core Architectures: The Potential for Processor Power Reduction', 'ISA异构多核架构介绍', '多核', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=1253185&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1253185'),
(66, 'Data Speculation Support for a Chip Multiprocessor', '多核上的数据投机策略与技术', '多核', 'http://dl.acm.org/citation.cfm?id=291020'),
(67, 'Shore-MT: A Scalable Storage Manager for the Multicore Era', '多核时代的可扩展存储管理技术', '多核', 'www.cs.cmu.edu/~StagedDB/papers/edbt09shoremt.pdf?'),
(68, 'Interconnections in Multi-Core Architectures', '多核架构的互联技术研究', '多核', 'http://www.cs.washington.edu/education/courses/cse590g/05au/07A-01.PDF'),
(69, 'Definition: multi-core processor', '多核处理器的定义', '多核', '''http://searchdatacenter.techtarget.com/sDefinition/0'),
(70, 'What makes parallel programming hard?', '多核上编程的挑战', '多核', 'http://www.futurechips.org/tips-for-power-coders/parallel-programming.html'),
(71, 'Intel Shows 48-core x86 Processor as Single-chip Cloud Compute', 'Intel多核处理器实例及其云计算应用', '多核', 'http://www.pcper.com/article.php?aid=825'),
(72, 'Multi-core Programming for Medical Imaging', '多核处理在图像处理中的应用', '多核', 'http://www.uiowa.edu/mihpclab/presentations/staffPresentations/2009_12_22_Multi-core%20Programming%20for%20Medical%20Imaging.pdf'),
(73, 'CPU designers debate multi-core future', '多核处理器设计的未来发展趋势', '多核', 'http://eetimes.com/electronics-news/4076123/CPU-designers-debate-multi-core-future'),
(74, 'ReMAP: A Reconfigurable Heterogeneous Multicore Architecture', '重构异构多核处理架构', '多核', 'www.csl.cornell.edu/~mwatkins/papers/micro10.pdf?'),
(75, 'Understanding the Thermal Implications of Multi-Core Architectures', '多核处理架构上的能耗管理', '多核', 'ieeexplore.ieee.org/iel5/71/4288098/04288104.pdf?arnumber=4288104'),
(76, 'A Flexible Heterogeneous Multi-Core Architecture', '异构多核处理架构', '多核', 'faculty.cse.tamu.edu/djimenez/pdfs/pericasm_flexible.pdf'),
(77, 'Dynamic Thermal Management in 3D Multicore Architectures', '多核处理架构上的动态能耗管理', '多核', 'www.bu.edu/dbin/ece/people/acoskun/coskun_date09.pdf'),
(78, 'A Unified Model for Multicore Architectures', '一种统一的多核处理架构', '多核', 'www.csd.uwo.ca/~moreno/CS433-CS9624/Resources/IFMT08.pdf'),
(79, 'A Survey of Multicore Processors', '多核处理器的综述报告', '多核', 'http://web.eecs.umich.edu/~blakeg/docs/aSurveyofMulticoreProcessors.pdf'),
(80, 'OpenMP in Multicore Architectures', '多核架构上的OpenMP编程指南', '多核', 'http://www-users.cs.umn.edu/~harish/reports/openMP.pdf'),
(81, 'Science Clouds: Early Experiences in Cloud Computing for Scientific Applications', '这篇文档包含科学项目采用科学云技术的描述，还有他经验的早期总结。', '云计算', 'http://www.citeulike.org/user/jgallard/article/5975692'),
(82, 'Phoenix?Cloud: Consolidating Different Computing Loads on Shared Cluster System for Large Organization', '在论文中，我们设计运行了software-phoenix云管理系统，在共享的集群系统中整合异构的计算负载。进一步，我们还提出了供大组织和他附属部门共享集群系统的合作资源提供和管理策略。Phoenix Cloud减少了系统的规模。', '云计算', 'http://arxiv.org/abs/0906.1346'),
(83, 'Cloud Computing and Grid Computing 360-Degree Compared', 'Ian Foster比较对比了云计算和网格计算的各方面，并给出了两者的本质特征。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4738445&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4738445'),
(84, 'Toward a Unified Ontology of Cloud Computing', '这篇文章把云模型分为5层，解释了他们的内在关系，本文的贡献是第一个对云模型建立本体。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4738443&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4738443'),
(85, 'The Cumulus Project: Build a Scientific Cloud for a?Data?Center', '介绍了Cumulus工程的各个方面，如实验床，基础设施，中间件和应用程序模型。', '云计算', 'http://www.cca08.org/speakers/wang.html'),
(86, 'The Eucalyptus Open-source Cloud-computing System', 'Eucalyptus作为云计算开源的软件框架，概述了他设计的基本原则，简单易于使用而且能模块化。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5071863&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5071863'),
(87, 'GridBatch: Cloud Computing for Large-Scale Data-Intensive Batch Applications', 'GridBatch系统为解决在云计算下的大规模精密数据批处理问题，GridBatch是一个编程模型，用户能控制数据的分割，控制计算怎么被分布的，最后给出一个例子，展示了他在EC2下的高性能。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4534231&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4534231'),
(88, 'Cost-Benefit Analysis of Cloud Computing versus Desktop Grids', '分析对比了采用云计算模型和桌面电脑组成的网格模型在性能和成本收益方面的优劣。', '云计算', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5160911&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5160911'),
(89, 'Programming Abstractions for Clouds', '本文讨论了云应用程序编程面临的挑战与发展，通过几个应用程序的讨论，演示了可能的解决方案。同时讨论了怎样正确使用抽象的编程接口，框架使其更有效，可扩展，最重要的独立于系统，这些接口框架支持普通的编程执行模式。', '云计算', 'http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.157.6615'),
(90, '?Amdahl''s Law in the.?Multicore?Era', '多核时代下的Amdahl定律', '多核', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=4563876&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D4563876'),
(91, 'From a Few Cores to Many: A Tera-scale Computing Research Overview', '多核和众核的前瞻技术介绍', '多核', 'ftp://download.intel.com/research/platform/terascale/terascale_overview_paper.pdf'),
(92, 'Thousand Core Chips—A Technology Perspective', '片上众核的技术介绍', '多核', 'http://impact.asu.edu/cse520fa07/reference/borkar-DAC-07.pdf'),
(93, 'The Impact of Performance Asymmetry in Emerging Multicore Architectures', '多核架构上的性能分析论文', '多核', 'http://pages.cs.wisc.edu/~mscalar/papers/2005/isca2005-performance-asymmetry.pdf'),
(94, 'Single-ISA Heterogeneous Multi-Core Architectures: The Potential for Processor Power Reduction', 'ISA异构多核架构介绍', '多核', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=1253185&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1253185'),
(95, 'Data Speculation Support for a Chip Multiprocessor', '多核上的数据投机策略与技术', '多核', 'http://dl.acm.org/citation.cfm?id=291020'),
(96, 'Shore-MT: A Scalable Storage Manager for the Multicore Era', '多核时代的可扩展存储管理技术', '多核', 'www.cs.cmu.edu/~StagedDB/papers/edbt09shoremt.pdf?'),
(97, 'Interconnections in Multi-Core Architectures', '多核架构的互联技术研究', '多核', 'http://www.cs.washington.edu/education/courses/cse590g/05au/07A-01.PDF'),
(98, '高速缓冲存储器性能解析', '为了提高存储器存取数据的速度 ，使之能与处理机的处理速度相匹配 ，许多计算机和微型计算机系统都采取了各种方法 ，使用高速缓冲存储器是其中的一个重要措施。现在许多系统都采用三级存储结构 ，即在中央处理机和内存之间增加了一个高速缓冲存储器。本文分析了高速缓存的结构和工作原理 ，阐述了高速缓存的工作过程以及对处理器性能的影响', 'Cache', 'http://www.cnki.com.cn/Article/CJFDTotal-WJFZ200005010.htm'),
(99, '一种低功耗的高性能四路组相联CMOS高速缓冲存储器', '详细介绍如何采用0.18μm/1.8V 1P6M数字CMOS工艺，设计并实现一种用于高性能32位RISC微处理器的64kb四路组相联片上高速缓冲存储器(cache)。当采用串行访问方式时，该四路组相联cache的功耗比采用传统并行访问方式在cache命中时降低26%，在cache失效时降低35%.该cache的设计中还采用了高速电路模块如高速电流灵敏放大器和分裂式动态tag比较器等来提高电路工作速度.', 'Cache', 'http://d.wanfangdata.com.cn/Periodical_bdtxb200404002.aspx'),
(100, '高速缓冲存储器教学演示系统设计与实现', '利用形象生动的动画演示来讲解教学内容是当今ＣＡＩ发展的一个重要方向。本文论述了我们设计实现的有关高速缓冲存储器工作原理的教学动画演示系统。该系统由Ｃａｃｈｅ工作过程，地址映象，ＬＲＵ替换算法，ＬＲＵ算法硬件实现等四个演示模块组成。文中介绍了这几个模块的设计思想，界面以及实现技术等。', 'Cache', 'http://www.cqvip.com/qk/95131X/199403/1349133.html'),
(101, 'Multiprocessor scalability cache coherence protocol analysis', '分析了可缩放共享存储器多机系统Cache一致性协议的软硬件解决方案.集中式控制方法只适应于规模适中的多机系统，这是因为数据块共享信息存放在系统存储器中，成为性能提高的瓶颈;分布式控制方法允许系统拥有多个存储器控制部件，适合于大规模的多机系统.基于软件的Cache一致性技术建立在对源程序的预处理基础上，基本不需要或只需要很少的额外硬件.处理机数量的变化并不改变源程序的属性，编译程序的分析结果适用于任何规模的多处理机系统，具有很强的可缩放性.', 'Cache', 'http://d.wanfangdata.com.cn/Periodical_wjfz200902027.aspx'),
(102, '高速缓冲存储器Cache设计的关键技术分析', '高速缓冲存储器（Cache）技术是现代处理器设计中的核心技术之一.本文详细讨论了Cache设计中的重要内容，包括Cache设计的基本问题，Cache性能分析，Cache失效原因的分析以及Cache设计中一些折衷的考虑.', 'Cache', 'http://www.cqvip.com/qk/97377X/200607/21625193.html'),
(103, '高速缓冲存储器的功能原理探讨', '随着半导体工业的不断发展，微型计算机生产的大规模化和一些计算机技术在微型计算机中的普遍采用，使微型计算机系统的性能价格比成倍的增长。高档微型计算机CPU的问世，大大提高了微型计算机的运算速度，其中，高速缓冲存储器(Cache)即是推动微型计算机发展的计算机技术之一。本文介绍了高速cache的功能原理及介绍探讨', 'Cache', 'http://www.cqvip.com/qk/97971X/200804/1000042485.html'),
(104, 'Computer analysis of the cache memory architecture', '通过对片外和片内高速缓冲存储器体系结构的总结与评价，着重分析了片内Cache与处理器核心部件、外部存储器之间的连接关系，并通过对于普林斯顿结构和哈佛结构的优缺点的讨论和分析可知，片内两级Cache结构中，一级Cache适用于哈佛结构，，远离操作部件的二级Cache则采用普林斯顿结构，可以动态调节指令和数据在其中的分配比例.这种综合的两级Cache体系结构，兼容了哈佛结构和普林斯顿结构的优势，弥补了二者的缺陷，充分发挥片内Cache的作用.', 'Cache', 'http://d.wanfangdata.com.cn/Periodical_hkjsjs200603009.aspx'),
(105, '影响高速缓冲存储器提高命中率的几种因素', '在微机系统中，采用各种技术用于提高计算机的工作速度，高速缓冲存储器是其中之一，但是，影响高速缓冲存储器的工作效率的因素很多，本文试图对其中主要因素进行分析，并比较其优劣', 'Cache', 'http://www.cqvip.com/qk/90011A/199802/2921748.html'),
(106, '星载计算机高速缓冲存储器的加固技术和性能', '本文讨论了星载计算机高速缓存(CACHE)的设计，提出了定期用校验码查错和重载来清洗CACHE中出现的单粒子事件(SEU)，并进行了理论分析，导出了计算公式。', 'Cache', 'http://cpfd.cnki.com.cn/Article/CPFDTOTAL-KJTC199811001068.htm'),
(107, 'WP Super Cache', '本文主要介绍了WP Super Cache，它是一种非常快速的缓存引擎。它可以为WordPress生成静态html文件。WP Super Cache将根据动态的WordPress biog生成静态html文件，一旦html文件生成后，网络服务器将为该文件直接服务，而不是转而再处理相对更重，更昂贵的WordPress的PHP脚本。', 'Cache', 'http://wordpress.org/plugins/wp-super-cache/'),
(108, 'PC系统高速缓冲存储器Cache的原理，设计及实现', '本文着重探讨PC系统中的cache是如何工作的，以及如何减少CPU与内存之间的速度差异的4种方法，最后对其概念，在PC、CPU中的实现进行了简介', 'Cache', 'http://www.yesky.com/5/3005.shtml'),
(109, 'Cache一致性论文', '为了缓和CPU与存储器之间的速度差距，在计算机系统的CPU与主存之间引入了cache。但在多处理器系统中，由于多个处理器可能对同一数据块进行读写操作，当某个处理器对共享的数据块进行写操作时，其它处理器的cache中该数据块的副本将成为过时的数据。如果不及时地通知相应的处理器，将导致错误的运行结果。本文介绍了Cache的作用，Cache一致性问题的原因及解决这个问的两种协议.', 'Cache', 'http://wenku.baidu.com/view/bc9450d97f1922791688e895.html'),
(110, 'Cache的发展工作过程及作用', '本文详细介绍了cache的发展历史，从无到有，从有到全，以及其工作原理的不断完善，最后详细介绍了Cache在计算机中的工作过程和作用', 'Cache', 'http://www.docin.com/p-276443793.html'),
(111, 'Research and Implementation of Proxy Cache', '代理缓存在实际应用方面有非常重要的价值，是当前代理服务器的基本功能模块，很多代理服务器是作为缓存代理服务器来是用的。代理服务器可分为带有缓存和不带有缓存的两种。而实际上，各公司产品在基本性能差别不大的情况下，竞争的重点都落在提供的功能上。如：更好的缓存策略。 本课题是整个代理服务器项目中的一部分。本文对有关代理缓存技术的各种协议进行深入的研究和剖析，研究了缓存取代算法，实现了主动缓存和被动缓存，并对分布式CARP缓存提出了设计。另外，对于动态页面缓存等也提出了一些建议。 ', 'Cache', 'http://cnki.agrilib.ac.cn/KCMS/detail/detail.aspx?filename=2001007404.nh&dbcode=CMFD&dbname=CMFD2001'),
(112, 'Cache coherence', '在计算中，高速缓存一致性（也可高速缓存相关性）是指存储在一个共享的资源的本地高速缓存中的数据的一致性。Cache一致性的纪律，确保整个系统及时传播，共享操作数的值的变化。本文详细介绍了三个不同级别的缓存一致性。', 'Cache', 'http://en.wikipedia.org/wiki/Cache_coherence'),
(113, 'CPU cache', 'CPU高速缓存是由一台计算机的中央处理单元使用的高速缓存，以用来减少访问存储器的平均时间。高速缓存是一种更小，更快的存储器，用于存储频繁使用的主存储器位置的数据的副本。大多数存储器访问被缓存的存储器位置时，只要平均的内存访问延迟，缓存延迟的延迟时间就比主内存短。', 'Cache', 'http://en.wikipedia.org/wiki/CPU_cache'),
(114, '高速缓冲存储器的设计与实现', '本文从高速缓存的结构和基本理论出发，介绍了32位高性能、低功耗嵌入式微处理器中高速缓存的实现方法，从RTL设计到版图设计的各个部分进行了论述，并介绍了该模块全定制部分电路和版图的实现。', 'Cache', 'http://www.cqvip.com/qk/97360A/200518/20128371.html'),
(115, '一种新颖的双端口数据高速缓冲存储器', '本文设计并实现了一个4路组相连、容量为16 kB的双端口数据高速缓冲存储器.通过在高速缓冲存储器内使用双端口SRAM，使其具有真正双端口并行访问能力，', 'Cache', 'http://d.wanfangdata.com.cn/Periodical_wdzx200306018.aspx'),
(116, '高速缓冲存储器的作用和工作原理', '在计算机存储系统的层次结构中，介于中央处理器和主存储器之间的高速小容量存储器。它和主存储器一起构成一级的存储器。高速缓冲存储器和主存储器之间信息的调度和传送是由硬件自动进行的，本文介绍了高速缓冲存储器的作用，并对其工作原理进行了详细论述', 'Cache', 'http://tech.watchstor.com/storage-systems-114478.htm'),
(117, '用PC机群组构并行超级计算机 ', '介绍PC机群的Beowulf超级计算机。由高等院校、大型实验室和研究部门共同研究推出PC群机Beowulf超级计算机。这一创举，说明超级计算机可以用大众化的PC机集群来完成，这对我国是一个挑战和机遇.这里对Beowulf作了一些基础研究，论述了PC群机的结构组成原理，操作系统平台和并行计算程序设计、并行通信程序设计等问题.', '超级计算机', 'http://d.wanfangdata.com.cn/periodical_jsjgc200009001.aspx'),
(118, '超级计算机上矩阵乘的并行计算与实现', '在分布式超级计算机上进行矩阵乘的并行运算研究。数值预报系统中经常要用到矩阵乘运算.在分布式超级计算机(如IBM-SP)上，矩阵乘的并行计算需要较多的数据移动，有效的数据传输对矩阵乘的实现至关重要.该文讨论了两种矩阵乘的并行算法，一种是基于矩阵的列-行划分方式，一种是基于矩阵的网格划分方式.在IBM-SP计算机上的实验结果表明，网格划分的矩阵乘并行算法通讯开销更小，并行效率更高，其并行加速比较列-行并行算法改善约10%.', '超级计算机', 'http://d.wanfangdata.com.cn/periodical_yyqxxb200501014.aspx'),
(119, '天河一号超级计算机系统研制 ', '介绍天河一号超级计算机系统。2009年10月，国家首台千万亿次超级计算机系统——“天河一号”在国防科学技术大学诞生。“天河一号”的诞生，是我国高性能计算机技术发展的又一重大突破，标志着我国超级计算机研制能力实现了从百万亿次到千万亿次的重大跨越，我国成为继美国之后第二个能研制千万亿次超级计算机系统的国家。“天河一号”系统峰值性能达每秒1206万亿次双精度浮点运算，Linpack实测速度达到每秒563．1万亿次，内存总容量98TB，点点通信带宽每秒40Gb、共享磁盘容量为1PB，综合技术水平进入世界前列。', '超级计算机', 'http://f.wanfangdata.com.cn/view/%E5%A4%A9%E6%B2%B3%E4%B8%80%E5%8F%B7%E8%B6%85%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%A0%94%E5%88%B6.aspx?ID=Periodical_gfkj200906001&transaction={%22ExtraData%22%3a[]%2c%22IsCache%22%3afalse%2c%22Transaction%22%3a{%22DateTime%22%3a%22\\%2fDate%281378804891265%2b0800%29\\%2f%22%2c%22Id%22%3a%22d694f8e5-3ab2-42f8-9727-a235011e0ff5%22%2c%22Memo%22%3anull%2c%22ProductDetail%22%3a%22Periodical_gfkj200906001%22%2c%22SessionId%22%3a%22db861308-efd1-49a5-b320-eb4a2f7b3fbb%22%2c%22Signature%22%3a%22mfvXzvBGOzVDNKfMnAVcZn0N5QBU9NEfyZPbnY9Xs48YUydZ7j5XfWftOo9sQ8vM%22%2c%22TransferIn%22%3a{%22AccountType%22%3a%22Income%22%2c%22Key%22%3a%22PeriodicalFulltext%22}%2c%22TransferOut%22%3a{%22AccountType%22%3a%22GTimeLimit%22%2c%22Key%22%3a%22tjdxtsg%22}%2c%22Turnover%22%3a3.00000%2c%22User%22%3anull%2c%22UserIP%22%3a%22111.187.0.28%22}%2c%22TransferOutAccountsStatus%22%3a[]}'),
(120, '面向流场计算的专用超级计算机体系结构研究', '本文在对流体力学等一类大型计算问题的并行计算模型进行分析的基础上，提出了一种可以实现大规模并行处理的专用超级计算机体系结构方案。该系统由一台宿主机和一个多计算机阵列组成一台个人超级计算机。利用专用性，减小复杂性，提高并行性是系统的主要特色。系统采用二维超环结构作为计算机结点之间的互连结构，反映了计算中数据交换的局部性特点，具有好的通信性能。每个计算机结点本身又采用流水线向量处理结构，从而将高层次的多机并行与低层次的向量处理相结合，实现了大规模的并行计算。本文讨论了系统的软、硬件结构并研究和评价了通信性能。', '超级计算机', 'http://www.cnki.com.cn/Article/CJFDTotal-HKXB198909008.htm'),
(121, '基于超级计算机的通用并行雷达信号处理', '本文所讨论的软件平台在一个采用超级计算机结构的高速实时通用雷达信号处理系统样机上实现.该软件平台通过友好的交互界面、编译器和操作系统，并行调度自行开发的底层通用雷达信号处理函数库，可灵活实现多种雷达信号处理系统.本文从系统高层结构和底层模块实现这两个方面，介绍了软件平台上雷达信号处理函数库的通用化设计与实现方案.', '超级计算机', 'http://d.wanfangdata.com.cn/periodical_wjsjxx200530055.aspx'),
(122, 'A parallel FDTD simulator based on the Tianhe-1A supercomputer ', '本文提出了一种基于天河-1A超级计算机的并行FDTD仿真算法。并行FDTD的算法是一个功能强大的工具，用于解决平行性质的大型问题。天河-1A超级计算机是目前世界上最快的国家之一，它可以提供非常高的计算能力。与超级计算机相结合，是一种高效的FDTD仿真实际应用的迫切需要。我们已经开发出一种基于天河-1A超级计算机的高性能并行有限差分时域（FDTD）算法。我们的目标是有效地解决了复杂结构问题。通过使用并行计算，我们是能够在不到48小时内完成计算。', '超级计算机', 'http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=5915545&queryText%3Dsupercomputer'),
(123, 'New device technologies developed in the Japanese national project on super computer system ', '这是一篇超导系统设计上的国家项目概述。该项目于1981年推出，并在1990年1月完成。制度建设的基本概念被称为PHI，设计以下关键技术：并行处理高速运算，高速，大容量存储，分层存储和友好的用户界面。依赖于约瑟夫森结器件，GaAs MESFET器件和HEMT技术的发展。', '超级计算机', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=175433&tag=1'),
(124, 'Parallel performance of large scale impact simulations on Linux cluster super computer', '三维分析与固定网格大变形分析的问题已成为相当普遍。由于该问题的复杂性，在并行系统中，有必要利用一个并行的动态代码。本文的目的是提出一个新的测试自制的Linux集群超级计算机的高速冲击问题的有限元冲击代码的并行性能。虽然一些低效率仍然是确定的并行有限元计算，从而增加通信开销。在影响斜板式金属球的情况下，整体速度不断增加，甚至高达128个CPU。各部分的经过时间的调查表明，大部分的低效率来自负载不平衡的接触。两项基准问题表明大规模三维动态模拟在一个合理的计算时间的可能性。', '超级计算机', 'http://www.sciencedirect.com/science/article/pii/S0045794905003901'),
(125, 'The Cydra 5 departmental supercomputer: design philosophies， decisions， and trade-offs ', 'Cydra5是一种异质性的多处理器系统中，针对小型工作组或部门的科学家和工程师。这两种类型的处理器功能专业部门设置中找到的工作负载的不同组成部分。 Cydra5数字处理器，基于有向数据流架构，提供始终如一的高性能数值计算在更广泛的一类。交互式处理器从数字处理器卸载所有非数字的工作，离开它的数字应用上，自由支配时间。 I / O处理器，允许高带宽I / O转换与参与的互动或数字处理器最小。系统的体系结构和数据流的体系结构进行了描述。数字处理器的决策和折衷进行检查，讨论的主存储器系统。', '超级计算机', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=19820'),
(126, 'Achieving super computer performance with a DSP array processor ', '作者讨论了MUSIC（多信号处理器与智能通讯系统）系统，基于数字信号处理器（DSP）的并行分布式内存体系结构。 60个处理器单元的系统运作。它有3.8 GFLOPS的峰值性能和电力消耗小于800 W（包括强制空气冷却），适合19“机架。运行两个应用程序（BP算法，神经网络的学习和分子动力学模拟）速度比NEC SX-3快约6倍。', '超级计算机', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=236650'),
(127, 'An Overview of the BlueGene/L Supercomputer ', '本文概述了蓝色基因/ L超级计算机。该计算机是由IBM和劳伦斯·利弗莫尔国家实验室一起完成的。是基于新的架构，有65，536个节点的大规模并行系统。利用芯片上系统技术，能够提供目标的峰值处理能力为360万亿次浮点运算（每秒万亿次浮点运算）。该计算机在2004-2005年投入计算，其价格/性能和功耗/性能比是传统的架构无法比拟的。', '超级计算机', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1592896'),
(128, 'A Microprocessor-based Hypercube Supercomputer', '基于微处理器的立方体超级计算机是一种构建能够每秒执行几百万指令的最直接的和最便宜的方式。由企业，如克雷研究和控制数据构建的超级计算机没有使用这种方法，而是依靠非常快COM组件和流水线operations，这样的机器是相当昂贵的，他们每个性能改善越来越难以实现。与此相反，基于微处理器的立方体超级计算机可以显着改善其性能的机器，只需要通过添加更多的，更快的微处理器。', '超级计算机', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4089709'),
(129, 'TOP500 Supercomputer Sites', '我们列出了500最强大的计算机系统，这给研究高性能计算机的性能提供了一个很好的参考。使用Linpack基准测试性能工具对超级计算机的性能进行测试。', '超级计算机', 'http://www.uni-mannheim.de/rum/ueber_uns/dokumentationen/berichte_des_rechenzentrums/top500_juni_1998_pdf/top500_juni_1998.pdf'),
(130, 'A comprehensive model of the supercomputer workload ', '与任何计算机系统一样，超级计算机的性能取决于作为其输入的工作量。然而，不幸的是，有许多重要方面尚未被研究，或只是初期地已仿照的超级计算机工作负载。本文针对这个问题，考虑要求的时间（和其执行时间的关系）和作业取消的可能性，两个方面，衡量这台超级计算机的工作量。', '超级计算机', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=990753'),
(131, 'Workload Characteristics of a Multi-cluster Supercomputer', '本文提出一个综合表征多集群超级计算机的工作量的方案。我们描述的指标包括系统的利用率，工作到达率和间隔时间，取消作业率，作业面积（并行度），作业运行时，内存使用情况，以及用户/组行为等。确定指标（作业运行时间和内存使用情况，要求和实际运行等）之间的相关性和广泛的研究。与先前报告的工作量差异进行确认和统计分布都具有相同的特点适合生成合成的工作量。这项研究提供了不同的调度策略、资源管理和评价的实验在多集群的研究环境的现实基础。', '超级计算机', 'http://link.springer.com/chapter/10.1007/11407522_10'),
(132, 'Providing a cloud network infrastructure on a supercomputer', '超级计算机和云都使大量的计算内核用于计算。最近，类似于低功耗、大规模的可管理性、以低成本等指标正在推动软件和硬件的融合性。当然挑战是存在。其中一个就是目前的云计算基础设施会产生许多科学应用不需要的性能损失，特别是网络的虚拟化和虚拟化的性能损失。本文提供了一种混合超级计算机的软件基础设施，为直接访问硬件提供标准的弹性云基础，并能够与其他组件，硬件进行通信。', '超级计算机', 'http://dl.acm.org/citation.cfm?id=1851476.1851534&coll=DL&dl=ACM&CFID=244141014&CFTOKEN=25430143'),
(133, 'Scalable Time Warp on Blue Gene Supercomputers', '本文中，我们说明了可扩展的并行性能的TIMEWARP同步协议，IBM蓝色基因超级计算机的L和P变种。可扩展的时间扭曲表现为沟通，通过网络事件人口很大比例的模型并没有被证明多了一把处理器。我们提出的设计，强大的表演时间扭曲模拟器通过各种通信负载，非常大的处理器数量，多达131，072。对于使用65，536个处理器的的PHOLD基准模型，我们的时间扭曲模拟器产生每秒12.26十亿事件峰值承诺事件率在10％的远程事件和每秒4亿事件100％远程事件。', '超级计算机', 'http://dl.acm.org/citation.cfm?id=1577959.1577971&coll=DL&dl=ACM&CFID=244141014&CFTOKEN=25430143'),
(134, 'MP860层次式并行超级计算机的设计和实现 ', '并行处理技术是现代计算机领域提供超级计算的关键技术，在设计紧耦合并行处理系统时围绕着处理器和存储器为中心产生了多种不同的并行处理体系结构.本文介绍了以i80860XPCPU为基础的MP860并行系统:一种异构型层次式的多处理器系统.该系统设计中具有32个i80860XP处理器，其峰值速度可达32亿次/秒.本文具体讨论了多处理器总线问题、存储器Cache一致性问题，以及MP860并行系统提供的并行编程环境.', '超级计算机', 'http://d.wanfangdata.com.cn/periodical_jsjxb1998z1041.aspx'),
(135, '超级计算机作业运行稳定性分析', '通过作业日志分析和考核实验方式，对超级计算机并行作业运行稳定性进行了分析.日志分析结果表明，并行作业运行的稳定性会随作业执行时间的增长、作业使用CPU数的增多而下降;当并行作业的计算量达到105CPU小时量级，超过20%的作业会因系统故障而中止.考核实验结果表明，使用数千CPU的并行作业很容易受到多种因素的干扰而中止，很难持续运行超过24小时.最后给出了有关超级计算机稳定性改进、系统管理使用和并行程序研制的几点建议.', '超级计算机', 'http://d.wanfangdata.com.cn/Periodical_jsjgcykx200911024.aspx'),
(136, '超级计算机的多层架构抽象及描述 ', '超级计算机系统发展迅猛，不仅速度上日新月异，而且其结构也日益复杂化、多样化.为了能够准确有效地描述超级计算机的结构，给出统一的描述方法，提出超级计算机的多层架构思想.为超级计算机的进一步逻辑抽象或编写其模拟器提供了基础，并对超级计算机系统的设计具有一定的指导作用.', '超级计算机', 'http://d.wanfangdata.com.cn/Periodical_jsjgc200821091.aspx'),
(137, '基于统一资源管理的超级计算机系统节能方案 ', '从系统级节能角度出发，结合天河一号超级计算机系统硬件架构特点，通过将计算、通信、冷却、供电等各种系统资源有机结合在一起，制订统一的资源管理架构，应用最近最少使用(LRU)等多种管理策略对系统资源进行集中管理，有效降低系统能耗。', '超级计算机', 'http://d.wanfangdata.com.cn/Periodical_jsjyy201203063.aspx');
INSERT INTO `subject` (`id`, `name`, `description`, `subject_name`, `url`) VALUES
(138, 'EPIC: Explicitly Parallel Instruction Computing', 'Over the past two and a half decades， the computer industry has grown accustomed to the spectacular rate of increase in microprocessor performance. The industry accomplished this without fundamentally rewriting programs in parallel form， without changing algorithms or languages， and often without even recompiling programs. Instruction level parallel processing achieves high performance without major changes to software. However， computers have thus far achieved this goal at the expense of tremendous hardware complexity-a complexity that has grown so large as to challenge the industry''s ability to deliver ever-higher performance. The authors developed the Explicitly Parallel Instruction Computing (EPIC) style of architecture to enable higher levels of instruction-level-parallelism without unacceptable hardware complexity. They focus on the broader concept of EPIC as embodied by HPL-PD (formerly known as HPL PlayDoh) architecture， which encompasses a large space of possible EPIC ISAs (instruction set architectures). In this article， the authors focus on HPL-PD because it represents the essence of the EPIC philosophy while avoiding the idiosyncracies of a specific ISA', 'EPIC', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=820037&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D820037'),
(139, '并行编译中的区域调度问题', '介绍指令级并行性(ILP)中和指令级计算(EPIC)中区域的直观概念和这些概念的形式化工作，并简单介绍区域的几个调度算法，为并行编译中的区域调度问题提供一个系统的、形式化的论述。', 'EPIC', 'http://lib.cqvip.com/QK/96467X/200404/11508742.html'),
(140, '基于EPIC的同时多线程处理器取指策略', 'EPIC硬件简单，同时多线程易于开发线程级并行，在EPIC上实现同时多线程可以结合二者的优点。取指策略对同时多线程处理器的性能有重要影响。该文介绍了几种有代表性的超标量同时多线程处理器取指策略，分析了这些策略在EPIC同时多线程处理器上的适用性，提出了一种新的适用于EPIC的取指策略SICOUNT。分析表明SICOUNT策略可以充分利用EPIC软硬件协同的优势，在选择取指线程时使用编译器所提供的停顿信息，能更精确地估计各个线程的流动速度，使取出指令的质量更高。', 'EPIC', 'http://lib.cqvip.com/QK/95200X/200704/24849265.html'),
(141, '高性能微处理器中采用多种预取技术的指令Cache设计', '本文分析了传统的指令预取技术，并结合显性指令并行计算(EPIC)体系结构，研究了基于编译器与处理器通信的新的指令预取技术，提出了一种支持多种预取技术的L1指令Cache设计方案。', 'EPIC', 'http://lib.cqvip.com/QK/94293X/200411/10871074.html'),
(142, '嵌入式系统的适应性显式并行指令技术', '利用可重构技术可以显著改善系统的性能。重点分析探讨了支持可重构技术的适应性显式并行指令技术(AEPIC)的系统模型。该系统模型由一个显式并行指令技术(EPIC)处理器和一个精细且可动态重构结构紧密连接而成，其特点在于支持动态可重构和指令合成，因此可以为不同的应用程序提供不同的动态指令集。通过AEPIC模拟器和可重构硬件XilinxFPGA进行模拟分析以验证其有效性。实验结果表明：比起显式并行指令技术，此系统模型能够以同样的运行频率得到更高的运行速度。', 'EPIC', 'http://lib.cqvip.com/QK/95035X/200306/8939721.html'),
(143, 'EPIC微体系结构的存储级并行执行模型的研究', '描述了一种可以有效提高存储级并行（Memory Level Parallelism，MLP）的指令优化锁步执行模型——OLSM（Optimized Lock—Step execution Model）执行模型，并建立了一种能体现OLSM模型思想的层次存储结构．OLSM允许显示并行指令计算（Explicit Parallel Instruction Computing，EPIC）微处理器实现一定程度的乱序执行，解决了传统超长指令字（Very Long Instruction Word，VLIW）锁步执行的缺陷，可以充分利用结构中的大量计算和存储资源，最大化隐藏存储延迟、提高MLP．', 'EPIC', 'http://lib.cqvip.com/QK/90818X/200701/23627329.html'),
(144, '基于光互连全交叉网络的快速傅里叶变换并行计算', '本文提出了利用全交叉互连函数实现快速傅里叶变换的并行算法，采用现有的电子处理单元通过自由空间光互连全交叉网络构成光电混合型单指令流多数据流计算机系统将是实现这一并行算法的有效体系结构。', 'EPIC', 'http://lib.cqvip.com/QK/93651A/199405/1342162.html'),
(145, '基于并行计算的数字信号处理器', '本文针对传统信号处理系统不能为日益复杂的无线通信系统提供足够信号处理能力的问题，通过采用并行处理技术，可完成多种无线通信标准的基带信号处理.通过分析picoArray系列并行处理器芯片的结构、特点、指令系统和开发工具，获知其可提供远比传统处理器更强大和灵活的处理能力，最后介绍了其在功放线性化中的应用.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_xddzjs200701023.aspx'),
(146, '基于SSE的线性方程组并行计算', 'Intel处理器(Pentium Ⅲ，Pentium4)提供了SSE(Streaming SIMD Extensions:单指令多数据流扩展指令集)，支持指令级SIMD(单指令多数据)操作.线性方程组求解具有很高的内在SIMD并行性，通过将数据按SSE数据类型组织及对主要计算过程进行SIMD并行化，设计了基于SSE的算法，在PC机上予以实现并对代码进行了优化.测试结果表明:SSE大大加速了线性方程组的求解速度，与传统计算方式相比运算速度提高了约3～4倍.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_jtyjsj200401013.aspx'),
(147, '基于集群并行及指令优化的FDK重建算法', '为提高锥束CT的FDK重建算法在重建高分辨率的图像时的速度，分析2种并行策略及其对应的通信时耗，研究集群并行与SSE指令优化计算相结合的FDK算法，在8个节点的集群系统上进行实现。实验结果表明，采用集群并行加指令优化的方式，可将分辨率为2563的图像的重建速度提高到原来的29倍。', 'EPIC', 'http://lib.cqvip.com/QK/95200X/200908/30109003.html'),
(148, 'DSP中基于指令并行和任务并行的DMA接口设计', '在面向多媒体数据流的计算密集型的应用中，不仅要求DSP(数字信号处理器)有非常强大的数据处理能力，还要求其具有高速的数据输入、输出接口带宽.本文在传统DSP常用的增强型哈佛结构的基础上，提出一种DSP处理器DMA接口结构的设计方案，实现了基于指令并行和任务并行的DMA并行传输模式.通过6个常用的DSP算法程序实验验证，在片上存储器使用单口RAM的前提下，指令中带有片上Memory访存操作的指令占总指令的42.2%～94.3%时，这种方法设计的DMA接口能够在DSP零开销的情况下，完成必要的数据传输.而且能够实现对Host处理器程序员透明的DMA数据传输操作，有效地提高了DSP系统的性能.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_wdzxyjsj200407043.aspx'),
(149, '指令级并行中谓词分析技术的研究', '该文介绍在ORC(IA-64 Open Research Compiler)中首次设计实现的基于谓词划分图的谓词分析技术及其在指令调度中的应用．利用谓词分析技术建立了谓词关系数据库、指令调度查询谓词关系数据库提高指令级并行．文章着重论述了谓词关系数据库的核心——谓词划分图的建立，在谓词划分图的基础上实现了谓词关系的计算和查询.', 'EPIC', 'http://lib.cqvip.com/QK/90818X/200310/8608589.html'),
(150, '指令级并行的多媒体数据实时处理', '本文讨论了指令级并行运算环境中多媒体数据处理的实现方法和性能.围绕MMX技术，提出了面向数据流的并行程序开发方法，实现和测试了典型的多媒体数据处理算法，研究了指令级并行计算环境下不同算法的实现技巧，评估了各自的性能.针对MMX技术，提出了改进建议.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_gjstx98199804002.aspx'),
(151, '一种基于IA-64的并行架构的研究', '同时多线程(SMT)能在同一时钟周期执行不同线程的指令，同时开发了指令级并行(ILP)和线程级并行(TLP).显式并行指令计算(EPIC)关注于编译器和硬件的相互协作.在本文中，我们设计和实现了一套并行环境，其中包括并行编译器OpenUH和基于IA-64的同时多线程体系结构EDSMT，并通过NAS并行测试程序作出了性能评测.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_jsjgcykx200807023.aspx'),
(152, 'EPIC高性能微处理器体系结构及其应用', 'EPIC(Explicitly Parallel Instruction Computing)显式并行指令计算是当今高性能微处理器技术设计的新理念.本文分析了基于EPIC设计思想的安腾(Itanium)处理器体系结构特点，并介绍了安腾高性能微处理器的应用.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_jsjyszgc200405005.aspx'),
(153, 'ORC的全局指令调度技术', 'IA-64是一种崭新的体系结构，它为挖掘程序中潜在的指令级并行提供了丰富的硬件支持，例如:大寄存器组、(控制/数据)投机、谓词等.Itanium是IA-64的一个具体实现.该文作者将Bernstein的基于超标量处理机的全局指令调度算法应用于显式并行(EPIC)的Itanium处理机上.在结合Itanium处理机特性的同时，作者对Bernstein的算法有以下两点创新:(1)应用层次化区域.相对于传统的扁平区域，这样的区域具有很强的灵活性并提供了调度器大小合适的调度范围，使其既能充分利用硬件资源又能够有效地控制调度的时间和空间开销.(2)集成P-Ready指令调度.P-Ready是在与Bernstein算法框架差异很大的上下文中提出的.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_jsjxb200405001.aspx'),
(154, '高性能通用微处理器体系结构关键技术研究', '本文介绍了8级流水线和OLSM执行模型，以很少的硬件代价克服了基本EPIC模型的局限性.设计了一种多分支预测结构，支持多条分支指令的并行执行，并通过判定执行减少分支指令的数目;设计了两级cache存储器，提出DTD低功耗设计方法，并通过前瞻执行隐藏访存的延迟.最后，展望了高性能通用微处理器的发展趋势.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_jsjyjyfz200606005.aspx'),
(155, 'IA-64中软件流水的寄存器需求研究', '软件流水是开发循环程序指令级并行性的重要方法之一. IA-64是支持软件流水的EPIC体系结构.通过对NAS Benchmarks中可软件流水循环所需的寄存器进行量化分析，提出了一种限制循环展开因子的启发式算法，有效地解决了因可用寄存器不足而导致软件流水失败的问题，并提高了应用程序的执行速度.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_jsjyjyfz200401004.aspx'),
(156, 'IA-64中软件流水失败的解决方法', '软件流水是开发指令级并行性的重要方法之一.IA-64是支持软件流水的EPIC(显式并行指令计算)体系结构.通过对NAS Benchmarks和MediaBench中软件流水所需的寄存器进行分析，指出静态通用寄存器是导致软件流水失败的主要因素.提出了解决IA-64中软件流水失败的两种方法:限制循环展开因子的启发式算法(RSU)和堆栈寄存器分配算法(SRA).RSU通过适当减小循环展开因子，增加了软件流水的成功率;SRA在静态寄存器和旋转寄存器之间达到了动态的平衡，提高了寄存器的利用率，更有效地提高了编译器的性能.', 'EPIC', 'http://d.wanfangdata.com.cn/Periodical_qhdxxb200307037.aspx'),
(157, 'HP Integrity动能服务器：面向未来的最佳IT平台', '由Intel和HP共同研发的IA64 EPIC(显性并行指令计算)并不是单纯地完善某一个现有的结构体系．而是突破了RISC和CISC的局限性。最新的安腾2产品已经清晰地表明了，EPIC完全能够依靠自己的力量超越RISC和CISC的性能局限。', 'EPIC', 'http://lib.cqvip.com/QK/83753X/200341/11028770.html'),
(158, '无线传感器网络低功耗设计综述 ', '无线传感器网络(WSN)综合了传感器技术、嵌入式技术、分布式信息处理技术和网络通信技术，能够协作地实时监测、感知和采集各种环境对象的信息，并将信息传递给系统用户主机进行分析、处理.WSN中的节点，具有感知和路由的功能，在实际的应用中，功耗是影响节点工作寿命的关键因素.为实现一种低功耗的WSN，可以从WSN的体系结构、传感器节点以及网络各层次通信协议等角度去设计实现.在该领域还存在一些亟待解决的问题.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_cgqjs200605004.aspx'),
(159, '一种有效的低功耗扫描测试结构——PowerCut ', '扫描测试是超大规模集成电路测试中最常用的一种技术.但在扫描测试过程中，扫描单元的频繁翻转会引起电路中过大的测试功耗，这对电路测试提出了新的挑战. 提出了一种新颖的低功耗全扫描结构--PowerCut，通过对扫描链的修改，加入阻隔逻辑，有效降低扫描移位过程中的动态功耗，同时加入控制单元，使电 路在扫描移位过程时进入低漏电流状态，降低了电路的静态功耗.实验表明该结构在较小的硬件开销范围内有效地减小了扫描测试功耗.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_jsjyjyfz200703016.aspx'),
(160, '编译指导的多线程低功耗技术研究 ', '多线程和低功耗将是研究下一代微处理器结构所要解决和实现的重点目标之一.提出了一个在SMT体系结构中通过动态调整CPU执行频率降低功耗的计算模型，进一步分析和讨论了如何在编译时识别具有可使处理部件降低频率执行的期望区间，并给出了调整频率和能量分析的计算模型以及编译实现策略，目的是在不降低或不明显降低程序执行性能的情况下，显著降低处理器的功率/能量消耗.理论上该模型也可以用于superscalar和multiprocessor体系结构.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_jsjyjyfz200212006.aspx'),
(161, '低功耗VLSI芯片的设计方法', '对便携式电子器件的日益需求已经导致了功耗在IC设计产业的重要性.根据VLSI的设计流程，结合微处理器的工作机制，在系统、行为、结构、逻辑和物理5个层面上对低功耗的设计方法做了全面地分析.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_wdzxyjsj200706040.aspx'),
(162, '多核、多线程处理器的低功耗设计技术研究 ', '随着微处理器设计技术和半导体制造工艺的进步，芯片的规模和复杂度急剧增大，超高的功耗密度对系统稳定性造成很大影响，功耗壁垒已经成为提升微处理器性能 的最大障碍.本文介绍了低功耗设计的基本原理、研究内容、设计方法，分析了CMP和SMT体系结构的功耗需求和特性，讨论了不同的功耗优化策略在两种体系 结构下的适用程度以及对性能造成的影响.针对多核、多线程体系结构，着重从系统级、结构级和电路级等不同抽象层次对典型的功耗优化技术做了讨论.最后，展 望了未来微处理器低功耗设计技术的发展趋势.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_jsjkx200710079.aspx'),
(163, '基于Zigbee的无线传感器网络节点的设计及其通信的研究', '作为信息获取最重要和最基本的技术——传感器信息获取技术已经从过去的单一化渐渐向集成化、微型化和网络化方向发展。无线传感器网络是一个新兴前沿研究热点领域，综合了传感器技术、嵌入式计算技术、现代网络及无线通信技术、分布式信息处理技术等，具有十分广阔的应用前景，已经引起了学术界和工业界的高度重视。 本文介绍了无线传感器网络的概念，从无线传感器网络的网络体系结构、节点技术、网络协议出发，展开对无线传感器网络的相关研究，归纳了无线传感器网络的无线传感器网络的特点和关键性问题，分类研究了数据链路层及网络层协议，详细介绍了无线通信协议Zigbee的特点及协议结构。接着，基于无线传感器网络节点的设计原则，给出了无线传感器网络通用节点的基本构架，给出了系统的硬件结构及软件的设计方案和具体实现，并从硬件、软件两方面考虑了低功耗设计的要求。最后设计了实验环节，对系统的几项指标进行了相关的测试及分析。实验结果表明本文所设计的通用节点平台可以作为无线传感器网络节点的一种低成本、低功耗的解决方案，可以在较低功耗下实现传感器节点之间的无线通信。', '低功耗系统结构', 'http://cdmd.cnki.com.cn/Article/CDMD-10359-2007102877.htm'),
(164, '一种低功耗差动CMOS带隙基准源', '设计了一种采用0.6μmCMOS工艺的低功耗差动带隙基准电压源电路.在设计中采用两个pn结串联结构来减小运放失调电压的影响，并采用自偏置共源共栅运放来改善MOS器件对电源的依赖性.这种带隙基准源输出电压为2V，功耗为2.3mW，温度系数可达到13ppm/℃，主要适用于高精度模拟系统，并带有提高电源抑制比电路和启动电路', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_wjsjxx200507048.aspx'),
(165, '一个面向低功耗设计的RFID系统研究与实现 ', '功耗问题制约着射频识别(RFID)系统的应用领域，论文依据射频识别系统特点和工作原理，在读写器端将硬件结构级和软件级功耗优化相结合，在完成射频识别、存储器管理、时钟控制和通信接口的基础上，对待机和射频读写时采用不同的功耗策略，设计实现了一种面向低功耗设计的射频识别系统，最后对功耗情况进行了实验比较和分析.测试结果表明该系统完全达到低功耗应用要求，并且已经在澳门海关得到了成功运用.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_xxwxjsjxt200611022.aspx'),
(166, '超低功耗电子电路系统设计原则', '虽然超低功耗设计仍然是在 CMOS 集成电路(IC)基础上发展起来的，但是因为用户众多，数千种专用或通用超低功耗 IC 不断涌现，使设计人员不再在传统的 CMOS 型 IC 上下功夫，转而选择新型超低功耗 IC，致使近年来产生了多种超低功耗仪表。电池供电的水表、暖气表和煤气表近几年能够发展起来就是一个证明。目前，电池供电的单片机则是超低功耗IC的代表。本文将对超低功耗电路设计原则进行分析，并就怎样设计成超低功耗的产品作一些论述，从而证明了这种电路在电路结构和性价比等方面对传统电路极具竞争力。 ', '低功耗系统结构', 'http://www.eetrend.com/files-eetrend/forum/201009/100027422-15463-chaodigonghaodianlusheji.pdf'),
(167, '低功耗无线传感器网络节点的设计 ', '在对无线传感器(WSNS)网络体系结构、传感器节点的特点、功能分析的基础上，给出了无线传感器网络节点的软硬件低功耗设计与实现方案.传感器节点以低功耗嵌入式处理器MSP430F1611为核心，TinyOS为嵌入式实时操作系统，配以基于IEEE 802.15.4的MAC层协议的无线传输模块作为网络数据出口以及CC2420无线收发器，可以实现高速的数据采集和可靠的数据传送，能够较好地达到低功耗和实时性的要求.测试结果证明:该平台适合节点的应用，具有易使用、低功耗特点.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/periodical_wjsjyy200902006.aspx'),
(168, '低功耗、低成本、高可靠性、低复杂度的无线电通信协议--ZigBee ', '作为无线个人网中低数据传输率协议IEEE802.15.4/ZigBee，以低功耗、高可靠性、低复杂度见长.本文从在ISO通信模型的各通信层中所采用的协议进行分析，指出选择适当的经过实际验证的协议，并充分考虑各层协议的优化组合，是它取得高可靠性和低功耗的保证.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/Periodical_zdhyb200505001.aspx'),
(169, 'An Ultra Low Power System Architecture for Sensor Network Applications', '''Recent years have seen a burgeoning interest in embedded wireless sensor networks with applications ranging from habitat monitoring to medical applications. Wireless sensor networks have several important attributes that require special attention to device design. These include the need for inexpensive， long-lasting， highly reliable devices coupled with very low performance requirements. Ultimately， the ''''holy grail'''' of this design space is a truly untethered device that operates off of energy scavenged from the ambient environment. In this paper， we describe an application-driven approach to the architectural design and implementation of a wireless sensor device that recognizes the event-driven nature of many sensor-network workloads. We have developed a full-system simulator for our sensor node design to verify and explore our architecture. Our simulation results suggest one to two orders of magnitude reduction in power dissipation over existing commodity-based systems for an important class of sensor network applications. We are currently in the implementation stage of design， and plan to tape out the first version of our system within the next year.''', '低功耗系统结构', 'http://dl.acm.org/citation.cfm?id=1069988'),
(170, 'Low power systems for wireless microsensors ', 'Low power wireless sensor networks provide a new monitoring and control capability for civil and military applications in transportation， manufacturing， biomedical， environmental management， and safety and security systems. Wireless microsensor network nodes， operating at average and peak power levels constrained by compact power sources， offer a range of important challenges for low power methods. This paper reports advances in low power systems spanning network design， through power management， low power mixed signal circuits， and highly integrated RF network interfaces. Particular attention is focused on methods for low power RF receiver systems', '低功耗系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=542724&tag=1'),
(171, 'Wireless integrated network sensors: Low power systems on a chip ', 'Wireless Integrated Network Sensors (WINS) now provide a new monitoring and control capability for transportation， manufacturing， health care， environmental monitoring， and safety and security. WINS combine sensing， signal processing， decision capability， and wireless networking capability in a compact， low power system. WINS systems combine microsensor technology with low power sensor interface， signal processing， and RF communication circuits. The need for low cost presents engineering challenges for implementation of these systems in conventional digital CMOS technology. This paper describes micropower data converter， digital signal processing systems， and weak inversion CMOS RF circuits. The digital signal processing system relies on a continuously operating spectrum analyzer. Finally， the weak inversion CMOS RF systems are designed to exploit the properties of high-Q inductors to enable low power operation. This paper reviews system architecture and low power circuits for WINS.', '低功耗系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1470957'),
(172, 'Low power system scheduling and synthesis', 'Many scheduling techniques have been presented recently which exploit dynamic voltage scaling (DVS) and dynamic power management (DPM) for both uniprocessors and distributed systems， as well as both real-time and non-real-time systems. While such techniques are power-aware and aim at extending battery lifetimes for portable systems， they need to be augmented to make them battery-aware as well. We will survey such power-aware and battery-aware scheduling algorithms. Also， system synthesis algorithms for real-time systems-on-a-chip (SOCs)， distributed and wireless client-server embedded systems， etc.， have begun optimizing power consumption in addition to system price. We will survey such algorithms as well， and point out some open problems.', '低功耗系统结构', 'http://dl.acm.org/citation.cfm?id=603147'),
(173, 'Low power signal processing architectures for network microsensors ', 'Low power signal processing systems are required for distributed network microsensor technology. Network microsensors now provide a new monitoring and control capability for civil and military applications in transportation， manufacturing， biomedical technology， environmental management， and safety and security systems. Signal processing methods for event detection have been developed with low power， parallel architectures that optimize performance for unique sensor system requirements. Implementation of parallel datapaths with shared arithmetic elements enables high throughput at low clock rate. This method has been used to implement a microsensor spectrum analyzer for a 200 sample/s measurement system. This 0.8 /spl mu/ CMOS device operates with a 1 /spl mu/A drain current at a 3 V supply bias.', '低功耗系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=621275'),
(174, 'Performance analysis of low-power 1-bit CMOS full adder cells ', 'A performance analysis of 1-bit full-adder cell is presented. The adder cell is anatomized into smaller modules. The modules are studied and evaluated extensively. Several designs of each of them are developed， prototyped， simulated and analyzed. Twenty different 1-bit full-adder cells are constructed (most of them are novel circuits) by connecting combinations of different designs of these modules. Each of these cells exhibits different power consumption， speed， area， and driving capability figures. Two realistic circuit structures that include adder cells are used for simulation. A library of full-adder cells is developed and presented to the circuit designers to pick the full-adder cell that satisfies their specific applications.', '低功耗系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=988727'),
(175, 'Battery-Driven System Design: A New Frontier in Low Power Design', 'As an increasing number of electronic systems are powered by batteries， battery life becomes a primary design consideration. Maxiimizing battery life requires system designers to develop an understanding of the capabilities and limitations of the batteries that power such systems， and to incorporate battery considerations into the system design process. Recent research has shown that， the amount of energy that can be supplied by a given battery varies significantly， depending on how the energy is drawn. Consequently， researchers are attempting to develop new battery-driven approaches to system design， which deliver battery life improvements over and beyond what can be achieved through conventional low-power design techniques. This paper presents an introduction to this emerging area， surveys promising technologies that have been developed for battery modeling and battery-efficient system design， and outlines emerging industry standards for smart battery systems.', '低功耗系统结构', 'http://dl.acm.org/citation.cfm?id=835514'),
(176, '基于MSP430的极低功耗系统设计', 'MSP430是TI公司出品的一款功能强大的16位单片机，其显著特点是具有极低的功耗。本文对构造以MSP430为基础的极低功耗系统作了有益的探讨，对于设计各种便携式设备都具有较高的参考价值。 ', '低功耗系统结构', 'http://www.cnki.net/KCMS/detail/detail.aspx?QueryID=5&CurRec=1&recid=&filename=DPJY200306006&dbname=CJFD0305&dbcode=CJFQ&pr=&urlid=&yx=&uid=WEEvREcwSlJHSldTTGJhYkdIdHhRSTlqZkcrNlhLcVF2cHdmRTJHWk8xZ1dhKzh3T3JyTTZDMmd4NitmQUE0Ug==&v=MDAyOTJGQ3ZrVXJ6TElUM0JkN0c0SHRMTXFZOUZZb1I4ZVgxTHV4WVM3RGgxVDNxVHJXTTFGckNVUkxtZmJ1ZHY='),
(177, '绿色计算:内涵及趋势 ', '绿色计算是推动科技进步和社会可持续发展的一种新型计算模式，已成为国际竞争的焦点和制高点，关系到国家政治、经济和社会安全.绿色计算涉及系统结构、系统软件、并行分布式计算及计算机网络，它以保证计算系统的高效、可靠及提供普适化服务为前提，以计算系统的低耗为目标，面向新型计算机体系结构和包括云计算在内的新型计算模式，通过构建能耗感知的计算系统、网络互联环境和计算服务体系，为日益普适的个性化、多样化信息服务方式提供低耗支撑环境.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/Periodical_jsjgc201010001.aspx'),
(178, '一种增强的低功耗的嵌入式系统设计 ', '嵌入式系统片上Cache功耗是微处理器的功耗的最主要部分.提出新的低功耗技术，将Filter Cache方法与Loop Table方法相结合，无需增加新的指令，不需要复杂的硬件结构，并可针对具体的应用程序对处理器系统结构进行定制.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/Periodical_xdjsj-xby200910058.aspx'),
(179, '低功耗编译的若干相关技术 ', '本文综述低功耗编译相关技术.首先简要介绍了若干低功耗领域的基本术语之后，总结出了可用于降低功耗的三类编译手段:选取有助于降低功耗的传统优化，考虑功耗因素改造现有优化技术和通过编译制导配合硬件降低功耗.其次简单介绍了多线程系统和功耗模型的相关研究，最后，文章给出了低功耗编译领域研究的若干有潜力的方面，供有志进行这方面研究的研完人员参考.', '低功耗系统结构', 'http://d.wanfangdata.com.cn/Periodical_jsjkx200408050.aspx'),
(180, '可重构计算相关技术研究', '可重构计算技术结合了通用处理器和ASIC两者的优点，既能够提供硬件的高效率又具有软件的可编程性，。可重构系统的特点使它适合于计算密集型的大数据量处理任务，但是，由于应用领域不同，如何针对某个特定的应用领域设计一个优化的可重构结构是一个至关重要问题。本文围绕可重构系统任务划分、算法映射、可重构系统配置空间搜索、可重构计算系统结构和可重构系统在高性能计算领域的应用这几个方面进行了研究。', '可重构系统结构', 'http://cdmd.cnki.com.cn/Article/CDMD-10335-2007187933.htm'),
(181, '基于流水线技术的可重构体系结构的研究与设计', '目前，FPGA动态可重构技术大部分基于常规的SRAM FPGA平台，其主要的应用还停留在静态系统重构。真正意义上的动态重构系统由于其功能的连续性会受到重构时隙的影响，还处于研究阶段。重构时隙是实现动态重构系统的瓶颈问题。利用流水线技术和可重构技术，提出了一种动态可重构体系结构;采用AES算法对其进行仿真验证。结果表明，该结构有效地解决了动态重构系统中的重构时隙问题，可很好地应用到高速可重构体系结构设计中。', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-MINI200804032.htm'),
(182, '基于FPGA的动态可重构体系结构', '提出了一种基于FPGA的动态可重构系统的设计方案。该系统以协处理器的形式与LEON2通用处理器构成主/协处理器结构，并通过寄存器与网络来保存和传递数据流和配置流，实现了二者的优势互补。以具体实验对该方案进行了验证。', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-JSJY200607080.htm'),
(183, '面向多任务的可重构星载计算机设计', '为了使可重构星载计算机更好地满足微小卫星中多任务、多进程的工作需求，对其传统的体系结构进行了改进，参照生物体中干细胞的管理机制提出了一种现场可编程逻辑门阵列(field programmable gate array，FPGA)资源的动态管理方法，并以此为基础结合动态部分重构技术提出了一种能够根据星上任务进程自主调整电路结构的可重构星载计算机设计方法。该体系结构在消除可重构星载计算机中多个任务进程之间对硬件电路功能单元竞争的同时，不但简化了在轨升级机制，大幅减少了硬件升级所需上传的文件大小，还在系统层面增强了其对辐射损伤的应对能力。', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-XTYD201106042.htm'),
(184, 'Reconfigurable Computer Architectures', '对于可重构计算机体系结构的调查，显示了两个明显的趋势：数据流架构和动态架构。如果一个广泛的分类为基础的方案，即两个种程序中的并行指令和数据，被采纳，然后汇集资源重新配置的多处理器系统可以演变（PRRMP）。这样一个系统，包括硬件和软件两方面的突出特点，这正是本文讨论的。', '可重构系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4645353&tag=1'),
(185, 'Reconfigurable Computing: A Survey of Systems and Software', '由于其潜在的各种各样的应用大大加快，可重构计算已经成为了大量的研究的课题。它的主要特性是能够在硬件中执行计算，以提高性能，同时保留大部分的软件解决方案的灵活性。在本次调查中，我们将探讨可重构计算机硬件方面，从单芯片架构，以多芯片系统，包括内部结构和外部耦合。而且，我们集中针对这些机器上，如编译工具高级算法直接映射到可重构衬底上的软件。最后，我们认为所涉及的问题在运行时可重构系统，在程序执行过程中的可配置的硬件重用。', '可重构系统结构', 'http://www.idi.ntnu.no/emner/tdt22/2011/reconfig.pdf'),
(186, 'ReMAP: A Recon?gurable Heterogeneous Multicore Architecture', '本文提出了重新映射，可重构的体系结构，面向加速和并行应用在异构CMP中。 在REMAP中，线程共享一个共同的可重新配置的fabric，它可以为单个线程计算或综合计算微粒通信进行配置。该架构支持细粒度的点至点的通讯管道并行和细粒度的障碍同步。重映射内的通信和可配置的计算相结合，提供了独特的能力，进行定制的计算，在核心之间进行数据传输，并执行自定义的全局功能障碍后同步。 REMAP演示显着更高的性能和能源效率比硬有线通信机制，能理想地在额外区域或更强大的核心区域实现分配fabric。', '可重构系统结构', 'http://www.csl.cornell.edu/~mwatkins/papers/micro10.pdf'),
(187, 'PipeRench: a reconfigurable architecture and compiler', '可重构计算，它结合了通用处理器的灵活性与定制硬件的效率，可以提供替代方案。 PipeRench及其相关的编译器，以及新的可重构计算体系结构。 PipeRench结合传统的数字信号处理器，微控制器或通用处理器，可支持系统的各种计算需求，而无需定制硬件。本文描述了的PipeRench架构，以及如何解决一些预先存在问题与FPGA架构，如逻辑粒度，配置时间，向前兼容性，硬约束和编译时间。', '可重构系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=839324&tag=1'),
(188, 'Reconfigurable Computing Architecture Survey and introduction', 'Reconfigurable computing has been driven largely by the development of commodity field-programmable gate arrays (FPGAs). Standard FPGAsare somewhat of a mixed blessing for this field.In this survey we give a brief overview of programming logics and we present configurable logic block (CLB) and Look Up Table (LUT) as logic elements. Also we presented the definition of fine and coarse-grain architectures and present some commercial examples.This survey is also introduced the reconfigurable computing models like static and dynamic， single and multi-context and partial reconfiguration architectures. Finally run-time reconfigurable computing and the coupling of reconfigurable processing unit (RUP) delineated.', '可重构系统结构', 'http://gse.ufsc.br/~bezerra/disciplinas/SistemasDigitais_PGEEL/papers/2011_1/seminarios/francieli_1.pdf'),
(189, 'Smart Memories: a modular reconfigurable architecture', 'To address these conflicting requirements， we propose a modular reconfigurable architecture called Smart Memories， targeted at computing needs in the area; technology generation.For efficient computation under a wide class of possible applications， the memories， the wires， and the computational model can all be altered to match the applications. To show the applicability of this design， two very different machines at opposite ends of the architectural spectrum， the Imagine stream processor and the Hydra speculative multiprocessor， are mapped onto the Smart Memories computing substrate. ', '可重构系统结构', 'http://dl.acm.org/citation.cfm?id=339673'),
(190, '基于FPGA的动态部分可重构高性能计算实现', '针对大规模集群系统中的加速计算阵列或工作组内加速计算节点资源共享模式，提出了一个通用处理节点通过网络互联动态部分可重构计算节点的高性能计算体系架构，设计实现了一种基于FPGA的动态部分可重构计算节点，该动态部分可重构计算节点具备动态部分重构能力，可以根据应用需求动态加载不同的计算功能单元.基于Avnet的Virtex-4开发板，实现了基本硬件结构和动态部分可重构计算节点硬件原型，在此基础上生成全局配置数据文件及计算功能单元对应的部分配置数据文件，实现了动态部分可重构计算节点上的软件系统及远程访问接口库.', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-HZLG2010S1019.htm'),
(191, '可重构网络系统的模型及体系结构', '当前信息网络正面临着各种新挑战，具有较强动态适应能力的可重构网络系统正成为人们关注的焦点.本文提出一种网络系统重构的框架模型和可重构网络系统中的主动重构策略，并在此基础上建立了分面立体型的可重构网络系统的体系结构.该体系结构融合了网络主动防御和灾难恢复的关键技术，设置了独立的控制管理面，具有更好的可控、可管和适应性，能够为网络系统的重构提供基础的、体系结构级的支持.', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-XXWX200904013.htm'),
(192, '基于函数级原型的流水线可重构结构的研究', '针对目前动态可重构技术中重构时隙的问题，本文利用流水线技术和可重构技术，提出并讨论一种流水线可重构体系结构的函数级原型设计方法，并采用AES算法对其进行了仿真验证.结果表明，流水线可重构结构的函数级原型设计方法可有效的解决动态重构系统中的重构时隙问题.', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-XXWX200906047.htm'),
(193, '动态可重构系统的通信结构研究', '动态可重构技术能在一定控制逻辑的驱动下，对全部或部分逻辑资源实现在系统的动态功能变换和硬件的时分复用。本文介绍了可重构体系结构及典型动态可重构结构;详细分析、比较了动态可重构系统4种通信结构的主要性能，指出各自适用领域，并给出一个应用实例;最后探讨了动态可重构技术研究面临的相关问题和发展趋势。', '可重构系统结构', 'http://www.cnki.com.cn/Article/CJFDTOTAL-DPJY200711000.htm'),
(194, 'CMOL FPGA: a reconfigurable architecture for hybrid digital circuits with two-terminal nanodevices', 'This paper describes a digital logic architecture for ''CMOL'' hybrid circuits which combine a semiconductor–transistor (CMOS) stack and two levels of parallel nanowires， with molecular-scale nanodevices formed between the nanowires at every crosspoint. This cell-based， field-programmable gate array (FPGA)-like architecture is based on a uniform， reconfigurable CMOL fabric， with four-transistor CMOS cells and two-terminal nanodevices (''latching switches''). The switches play two roles: they provide diode-like I–V curves for logic circuit operation， and allow circuit mapping on CMOL fabric and its reconfiguration around defective nanodevices. ', '可重构系统结构', 'http://iopscience.iop.org/0957-4484/16/6/045'),
(195, 'Architecture exploration for a reconfigurable architecture template', 'Coarse-grained architectures (CGRAs) can be tailored and optimized for different application domains. The vast design space of coarse-grained reconfigurable architectures complicates the design of optimized processors. The goal is to design a domain-specific processor that provides just enough-flexibility for that domain while minimizing the energy consumption for a given level of performance. However， a flexible architecture template and a retargetable simulator and compiler enable systematic architecture exploration that can lead to more efficient domain-specific architecture design. This article presents such an environment and an architecture exploration for a novel CGRA template.', '可重构系统结构', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1413142'),
(196, '可重构系统(Reconfigurable System)简介', '实时电路重构(Reconfiguration of circuitry at runtime)技术的出现使过去传统意义上硬件和软件的界限变得模糊，让硬件系统软件化。实时电路重构的本质是利用可编程器件可多次重复配置逻辑状态的特性，在运行时根据需要动态改变系统的电路结构，从而使系统兼具灵活、简捷、硬件资源可复用、易于升级等多种优良性能。基于此技术设计的可重构系统(Reconfigurable System)在高速数字滤波器、图像压缩、硬件演化计算、定制计算(Custom Computing)、嵌入式系统等方面，都有着广泛的应用前景。', '可重构系统结构', 'http://www.eet-china.com/ARTICLES/2005AUG/PDF/2005AUG09_PL_TABEGINNERS20.PDF'),
(197, '可重构的多处理机实时操作系统', '本文论述的是一个可重构的多机多任务实时操作系统。文中从系统结构和系统设计的角度说明了它的结构特点及设计考虑，并详细地叙述了该系统的任务管理、存储器管理、中断管理、通讯模式及系统重构策略等。', '可重构系统结构', 'http://www.cqvip.com/qk/90976X/199704/2541603.html'),
(198, '可重构技术综述', '可重构性是指在一个系统中，其硬件模块或（和）软件模块均能根据变化的数据流或控制流对系统结构和算法进行重新配置（或重新设置）。可重构系统最突出的优点就是能够根据不同的应用需求，改变自身的体系结构，以便与具体的应用需求相匹配。可重构系统的实现技术包括DSP重构技术，FPGA重构，DSP＋FPGA重构，可重组算法逻辑体系结构，可编程片上系统（SOPC），可进化硬件（EHW），本地重构／Internet远程重构等。可重构技术尽管面临一些需研究和解决的问题，但是发展前景是广阔的。', '可重构系统结构', 'http://www.cqvip.com/qk/90793A/200710/25847893.html'),
(199, 'A reconfigurable architecture for hybrid CMOS/Nanodevice circuits', '''This report describes a preliminary evaluation of performance of a cell-FPGA-like architecture for future hybrid ''''CMOL'''' circuits. Such circuits will combine a semiconduc-tor-transistor (CMOS) stack and a two-level nanowire crossbar with molecular-scale two-terminal nanodevices (program-mable diodes) formed at each crosspoint.  The results show that even without such optimization， CMOL FPGA circuits may provide a density advantage of more than two orders of magnitude over the traditional CMOS FPGA with the same CMOS design rules， at comparable time delay， acceptable power consumption and potentially high defect tolerance.''', '可重构系统结构', 'http://dl.acm.org/citation.cfm?id=1117221'),
(200, '可重构异构系统结构研究', '可重构异构系统是由通用微处理器、可重构模块、专用ASIC、IO接口等资源构成的异构并行处理系统，文中提出的可重构异构系统结构融合了不同的计算资源，使系统中的某些资源能够很大限度地满足某种应用的模式和处理要求。系统中可重构模块的硬件功能可以通过在线重构技术加以改变，各模块之间的互连关系可通过重构互连控制器调节和仲裁。这种可变性使计算系统能适应更大范围的应用需求，向一体化和高性能的方向发展。', '可重构系统结构', 'http://www.cqvip.com/qk/97969A/200901/29211836.html'),
(201, '压缩对Hadoop性能能影响研究', '本文通过实验得出了一个压缩使用策略来帮助Hadoop的使用者来确定何时何地使用压缩以及使用何种压缩，基于这种策略，有些Hadoop应用在合理使用压缩后能提高达65%的效率。', 'Hadoop', 'http://wenku.it168.com/d_001128620.shtml'),
(202, '浅析Hadoop文件格式', 'Hadoop 作为MR 的开源实现，一直以动态运行解析文件格式并获得比MPP数据库快上几倍的装载速度为优势。本文介绍Hadoop目前已有的几种文件格式： SequenceFile、RCFile、Avro、文本格式、外部格式，分析其特点、开销及使用场景。', 'Hadoop', 'http://my.oschina.net/Chanthon/blog/149123'),
(203, 'Hadoop分布式数据清洗方案', '本论文主要针对海量数据：异常数据或孤立点数据，提出了一种基于Hadoop的分布式孤立点挖掘算法，并使用Map/Reduce分布式技术实现该算法，最终实现对数据清洗过程中对孤立点数据的挖掘及清洗.', 'Hadoop', 'http://www.cnki.net/KCMS/detail/detail.aspx?QueryID=0&CurRec=1&recid=&filename=1012449765.nh&dbname=CMFDLAST2013&dbcode=CMFD&pr=&urlid=&yx=&uid=WEEvREcwSlJHSldTTGJhYkdtaThDQWpKQmd3N0hqcmlXMDFPeElDcHVxeFM2MWt0elJ1VzZvUmxtNGdkRGxvaQ==&v=MTI3NzlQVkYyNkhMZThGOWJLcXBFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSTG1mYnVabUZDdmxVcjM='),
(204, '基于Hadoop的文档搜索系统设计与实现', '本文提出了一种改进的Hadoop页面算法，重点在于全文检索技术中对新技术的应用、检索性能的改善等方面，并同传统的PageRank算法对比，很好地改进了传统算法在主题漂移和权值沉积方面的问题。', 'Hadoop', 'http://www.showdoc.cn/view/viewdetail.php?docid=108616'),
(205, 'Hadoop cluster based distributed log analysis system', '当数据存储和计算遇到瓶颈时，分布式技术相对于传统的向上扩展技术在伸缩性和成本上都具有巨大优势。本文介绍了开源的分布式编程框架Hadoop，并通过具体的代码说明了基于Hadoop集群的分布式日志分析系统的工作方式。', 'Hadoop', 'http://www.doc88.com/p-776471094284.html'),
(206, '分布式计算开源框架Hadoop介绍', '在Open API日益盛行的今天，互联网应用的数据将会越来越有价值，如何去分析这些数据，挖掘其内在价值，就需要分布式计算来支撑海量数据的分析工作。Hadoop是Apache开源组织的一个分布式计算开源框架，在很多大型网站上都已经得到了应用，本文详细介绍了Hadoop框架', 'Hadoop', 'http://www.360doc.com/content/11/0118/10/4238731_87299200.shtml'),
(207, '使用Linux 和Hadoop 进行分布式计算', 'Apache 的 Hadoop，它是一个能够对海量数据进行分布式处理的软件框架。Hadoop 的一个应用是并行索引 Internet Web 页面。本文将介绍 Hadoop 框架，并展示它为什么是最重要的基于 Linux的分布式计算框架之一。', 'Hadoop', 'http://www.360doc.com/content/09/0925/15/5874_6421728.shtml'),
(208, 'hadoop集群网络性能优化：hadoop机架感知实现及配置', 'Hadoop的HDFS对数据文件的分布式存放是按照分块block存储，每个block会有多个副本(默认为3)，并且为了数据的安全和高效，所以Hadoop默认对3个副本的存放策略为：在本地机器的hdfs目录下存储一个block；在另外一个rack的某个datanode上存储一个block；在该机器的同一个rack下的某台机器上存储最后一个block。 这样的策略可以保证对该block所属文件的访问能够优先在本rack下找到。如果整个rack发生了异常，也可以在另外的rack上找到该 block的副本。这样足够的高效，并且同时做到了数据的容错。', 'Hadoop', 'http://www.360doc.com/content/10/1216/17/11586_78727054.shtml');
INSERT INTO `subject` (`id`, `name`, `description`, `subject_name`, `url`) VALUES
(209, '基于Hadoop MapReduce模型的词频统计实现', '基于Web的eMTM系统中，单个用户提交的原始数据量不断扩大，对响应时间要求不断提高，现有的三维人体模型生成引擎不能很好地满足这一需求。为了解决现有三维人体模型生成引擎在计算能力和可扩展能力上的不足，本文提出了基于并行计算框架MapReduce的三维人体模型生成引擎的方案。', 'Hadoop', 'http://116.255.141.134/view/viewdetail.php?docid=108564'),
(210, '基于Hadoop的海量影像数据管理关键技术研究', '论文基于Hadoop平台，对云计算应用于海量影像数据管理关键技术，在海量遥感影像数据影响金字塔的并行构建和海量遥感影像数据的存储两个方面进行了研究。', 'Hadoop', 'http://wenku.baidu.com/view/aecc432b453610661ed9f4f1.html'),
(211, '基于HADOOP的数据挖掘研究', '本文首先详细的介绍了云计算和HADOOP平台的核心架构以及运行机制。然后结合传统的数据挖掘系统提出了基于HADOOP的数据挖掘平台的技术架构。 ', 'Hadoop', 'http://cdmd.cnki.com.cn/Article/CDMD-10611-1011265802.htm'),
(212, 'Hadoop平台下的作业调度算法研究与改进', '本文主要对Hadoop平台的产生的相关背景、平台架构和核心部分进行了研究，并分析了三种算法', 'Hadoop', 'http://www.cloudwhy.com/bbs/thread-98-1-1.html'),
(213, 'Apache Hadoop Goes Realtime at Facebook', 'Facebook最近部署了Facebook的消息，首次面向用户的应用程序建立在Apache Hadoop平台。 Apache的HBase是Hadoop的设计，以支持数十亿的消息每天一个类似数据库层。我们探索的Hadoop的增强，使其更有效的实时系统，我们在配置系统权衡，以及如何在MySQL数据库分片计划用于其他应用在Facebook和许多其他网络规模，该解决方案具有显着的优势。', 'Hadoop', 'http://blog.nosqlfan.com/html/2301.html'),
(214, 'Improving Performance of Hadoop Clusters', 'MapReduce的Hadoop的一个开源实现，被广泛应用于要求低响应时间，支持集群计算工作。目前Hadoop实现假定计算集群中的节点在本质上是同质的。本论文介绍threepractical方法提高Hadoop集群的性能，并在本地的Hadoop系统的预取和探索整合。', 'Hadoop', 'http://www.chinacloud.cn/upload/2011-12/11120811512459.pdf'),
(215, '基于Hadoop框架的大数据集连接优化算法', '本文针对基于 MapReduce 框架的通用二路连接算法 RSJ 的不足提出了一种基于DistributedCache 的改进优化算法。', 'Hadoop', 'http://www.chinacloud.cn/show.aspx?id=12986&cid=28'),
(216, '基于Hadoop/MapReduce 的K-NN算法', '本文针对机器算法K最邻近算法，阐述其在Hadoop/MapReduce上的实现过程，其中对于文本的相似度会利用余弦定理还处理，这样在Hadoop/MapReduce环境下实现K-NN算法对位置类别的文本分类。', 'Hadoop', 'http://www.xzbu.com/8/view-3940292.htm'),
(217, '基于Hadoop的并行数据系统', '本文提出了一款基于Hadoop的并行数据分析系统——PDM该系统拥有大量以MapReduce为计算框架的并行数据分析算法，不仅包括传统的ETL、数据挖掘、数据统计和文本分析算法，还引入了基于图理论的SNA（社会网络分析）算法.详细阐述了并行多元线性回归算法和“多源最短路径”算法的原理和实现', 'Hadoop', 'http://www.zidir.com/html/lwmjw/058843.html'),
(218, 'Introduction To Apache Hadoop – HDFS & MapReduce', 'In this post we will focus on the Hadoop Distributed File System (HDFS) and MapReduce. These two are core Hadoop modules and are widely used. Together (HDFS + MapReduce) form a very powerful framework for distributed batch processing。HDFS and MapReduce form a framework for distributed batch processing.', 'Hadoop', 'http://www.oschina.net/translate/an-introduction-to-apache-hadoop-hdfs-mapreduce?cmp'),
(219, '基于Hadoop平台的软件系统的测试研究', '随着云计算的快速发展，以开源的分布式计算框架Hadoop为平台的软件系统越来越深入社会生活的各个领域，本文从Hadoop体系结构开始，分析了Hadoop平台软件系统测试的主要特点和难点，研究了它的的环境搭设、用例生成、内容、方法以及结果分析，并结合实例谈了具体应用，这些对于提高和改善Hadoop平台软件系统的应用效果具有重要指导意义。', 'Hadoop', 'http://www1.chkd.cnki.net/KNS50/detail.aspx?dbname=CHKP2012&filename=GFGY201207001026&filetitle=%E5%9F%BA%E4%BA%8EHadoop%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%8B%E8%AF%95%E7%A0%94%E7%A9%B6'),
(220, ' Chukwa：A large-scale monitoring system', 'Chukwa是数据采集监测和大型配送分析系统的初步实现，它建立在系统顶层。本文我们描述设计了一个开源的Hadoop分布式文件系统和MapReduce，此系统继承了Hadoop的可扩展性和灵活性，在监测，收集数据和分析显示结果方面取得了很好的效果', 'Hadoop', 'http://www.doc88.com/p-60081261861.html '),
(221, '一种面向超标量处理器的高能效指令缓存路选择技术 ', '路选择技术可以有效降低指令缓存能耗开销，但已有方法通常会由于预测错误或更新机制复杂而引入额外的取指延迟，导致整体能效性降低.本文面向典型超标量处理器的指令缓存结构，提出了一种高能效的路选择融合技术(Combining Way Selective Cache，CWS-Cache).基于对路预测和路历史技术适用条件的分析，CWS-Cache在不同的取指场景中选择使用最佳路选择策略，有效降低了指令缓存的取指能耗，并通过缩短非对齐取指组的访问延迟提升处理器性能.实验表明，CWS-Cache将拥有8路组相联指令缓存的基础处理器取指能耗降低了84.98％，性能提升了3.50％.与已有的三种方法相比，CWS-Cache能效性分别提升了15.48％，14.13％和8.76％.', '超标量', 'http://d.wanfangdata.com.cn/Periodical_dianzixb201111001.aspx'),
(222, '前瞻性执行超标量处理器的性能分析模型', '前瞻性执行技术是一种提高超标量处理器性能的有效技术，为了分析前瞻性执行的超标量处理器的性能潜力，文中对其建立了一个性能分析模型.此分析模型由结构冲突模型、数据和控制冲突模型两部分构成，具有很好的可实现性.文中利用此模型对9个Benchmark程序对不同的硬件配置进行了性能分析研究，结果证实了深度的前瞻性执行对超标量处理器的性能提高潜力很大.', '超标量', 'http://d.wanfangdata.com.cn/Periodical_jsjyjyfz199904018.aspx'),
(223, '超标量DSP的片上调试与实时跟踪支持', '本文提出并实现了一种基于32bit超标量DSP内核的片上调试与实时跟踪架构。', '超标量', 'http://d.wanfangdata.com.cn/Periodical_jsjyyyj201201058.aspx'),
(224, '超标量微处理器研究与应用 ', '首先介绍了超标量体系结构的基础，深入研究了超标量体系结构的基本特点和性能分析，详细地探讨了超标量体系中遇到的数据相关和结构相关的问题以及解决相关问题的Tomasulo算法及计分牌算法.在文章的最后，简单的讨论了动态转移预测和重排序缓冲机制.', '超标量', 'http://d.wanfangdata.com.cn/periodical_wdzxyjsj200409016.aspx'),
(225, '超标量、超流水线定点RISC核设计', '本文从开发指令级并行度ILP的角度出发，分析了超标量、超流水线处理器的体系结构特点，在此基础上给出了一个定点超标量RISC核设计.该设计采用 Top-down设计方法，含三个流水执行单元，指令动态调度，实现非阻塞高速缓存non-blocking-caches机制.', '超标量', 'http://d.wanfangdata.com.cn/periodical_dlyxtxb200104013.aspx'),
(226, '超标量，超流水处理机的性能分析', '本文介绍了超标量处理机、超级流水线处理机、超级流水线超标量处理机的基本原理和流水处理过程；列举了三种处理机典型机器的基本结构；重点分析了三种处理机的设计参数和相对于基本标量流水处理机的相对性能，并对超标量、超级流水线级数的确定，进行了讨论。 ', '超标量', 'http://www.cqvip.com/qk/95659x/199609/2368260.html'),
(227, '超标量与超流水线混合结构微处理器Pentium', 'CISC与RISC相结合、超标量与超流水线相结合的Pentium微处理器是Intel80x86系列微处理器的最新升级换代产品。本文在简要介绍其设计特色与内部单元结构的基础上，分别讨论Pentium微处理器的超标量整数处理单元、超流水线浮点处理单元、分离型Cache、指令集与指令预取等主要模块的设计原理与实际性能，并指出其应用前景。', '超标量', 'http://www.cnki.com.cn/Article/CJFDTotal-WCLJ199404000.htm'),
(228, '超标量处理器的转移预测方案研究 ', '随着高性能超标量处理器的流水线深度和发射度的增加，为挖掘宽发射、深度流水线处理器的潜在性能，设计一个杰出的转移预测器已变得越来越重要.常规的两级转移预测器是根据局部转移历史信息或全局转移历史信息来预测转移的结果，文章给出了一种新的转移预测方案，称为LGshare，它同时使用全局和局部转移历史信息来改进超标量微处理器的转移预测准确度.当模式历史表(PHT)的大小固定时，与常规的两级预测器相比，LGshare能获得更高的转移预测准确度.', '超标量', 'http://d.wanfangdata.com.cn/periodical_wdzxyjsj200611035.aspx'),
(229, '超标量微处理器研究', '为了提高微处理器的性能，人们在流水线技术的基础上提出了超标量（SuperscaIar）方法.超标量是指在CPU中有一条以上的流水线，并且每时钟周期内可以完成一条以上的指令的技术.超标量体系结构很早就出现了，而且在高性能的通用微处理器中也得到了普遍应用，例如InteIPentium系列处理器［InteI95］和IBMPowerPC系列处理器［IbmPc97］.本文介绍了超标量体系结构的基础，深入研究了超标量体系结构的基本特点和性能分析，详细地探讨了超标量体系中遇到的数据相关和结构相关的问题以及解决相关问题的TomasuIo算法及计分牌算法', '超标量', 'http://d.wanfangdata.com.cn/periodical_hainansfxyxb200404010.aspx'),
(230, '超标量处理器中重排序缓冲器的研究 ', '本文在介绍重排序缓冲器原理和实现的基础上，分析了重排序缓冲器的复杂度问题，即重排序缓冲器是一个占用大量寄存器资源并且有多个并行读写端口的复杂器件，耗费大量的功耗，容易出现不必要的延时。文中通过适当的改进方法，优化了重排序缓冲器的结构和性能。', '超标量', 'http://d.wanfangdata.com.cn/periodical_wxjyyy200916006.aspx'),
(231, '静态超标量MCU-DSP内核的Load先行访存调度', '针对嵌入式控制与数字信号处理混合应用领域， 建立了一种基于MCU-DSP融合架构处理器的Load先行机制。该内核使用静态超标量技术， 拥有整数、存取、循环三条流水线， 并采用特殊的四级流水。在存取流水线中， Load先行机制通过动态调度指令的访存顺序， 实现了Load指令对Store指令的先行， 提前了整数流水线中运算操作数的准备， 加快了流水线的处理速度。', '超标量', 'http://www.arocmag.com/arocmag/ch/reader/view_abstract.aspx?file_no=201302035'),
(232, 'Analysis of the Task Superscalar Architecture Hardware Design ', 'In this paper， we analyze the operational flow of two hardware implementations of the Task Superscalar architecture. The Task Superscalar is an experimental task based dataflow scheduler that dynamically detects inter-task data dependencies， identifies task-level parallelism， and executes tasks in the out-of-order manner. In this paper， we present a base implementation of the Task Superscalar architecture， as well as a new design with improved performance. We study the behavior of processing some dependent and non-dependent tasks with both base and improved hardware designs and present the simulation results compared with the results of the runtime implementation.', '超标量', 'http://www.sciencedirect.com/science/article/pii/S1877050913003402'),
(233, 'Performance/reliability trade-off in superscalar processors for aggressive NBTI restoration of functional units', 'Negative-Bias Temperature Instability has become a serious reliability concern in modern processors design， and in the last decade many research effort has been spent in developing circuit-level and architecture-level strategies to mitigate the induced delay variation of nanoscale circuits. At the architecture level， work has been proposed to alleviate this by appropriate dynamic instruction schedulingntechniques. However， their benefit is bounded to the available redundancy， limiting their attractiveness for a cost-effective VLSI solution. This paper presents an in-depth analysis of a performance reliability trade-off FSM design， that is able to attain the desired level of reliability improvement according to the ILP performance constraints. Power-gating is used for aggressive NBTI restoration. Extensive experimental results show several performance reliability trade-off examples in a broad range of application scenarios.', '超标量', 'http://dl.acm.org/citation.cfm?id=2483097'),
(234, 'On the functional test of the BTB logic in pipelined and superscalar processors ', 'Electronic systems are increasingly used for safety-critical applications， where the effects of faults must be taken under control and hopefully avoided. For this purpose， test of manufactured devices is particularly important， both at the end of the production line and during the operational phase. This paper describes a method to test the logic implementing the Branch Prediction Unit in pipelined and superscalar processors when this follows the Branch Target Buffer (BTB) architecture; the proposed approach is functional， i.e.， it is based on forcing the processor to execute a suitably devised test program and observing the produced results. Experimental results are provided on the DLX processor， showing that the method can achieve a high value of stuck-at fault coverage while also testing the memory in the BTB.', '超标量', 'http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6562677'),
(235, 'SoC Modeling for Video Coding with Superscalar Projection', 'This paper presents a concept for a better quality of service in scalable video streaming services with an improved display scales. The available funds will be administered by multiple connections with feedback to support video streaming applications and for improving the visualization of imaging samples. The scaling factor is achieved by increasing the level of visualization of the display unit. In this paper， modular approach to SoC design and implementation of scalable video coding algorithm for digital video source in a low overhead SoC design proposed for the scaling operation forcibly source environment.', '超标量', 'http://link.springer.com/chapter/10.1007/978-3-642-31552-7_80'),
(236, 'Real-Time 3D Depth Generation for Stereoscopic Video Applications with Thread-Level Superscalar-Pipeline Parallelization', 'We propose a low-complexity algorithm for stereoscopic video applications that generates a high-quality 3D image depth map from a single 2D image. Based on their characteristics， 2D images are classified into one of three categories before being processed by the proposed low-complexity algorithm to generate corresponding depth maps. We also extend the 3D depth algorithm to construct a parallel 3D video system. A thread-level superscalar-pipelining approach is developed to parallelize the 3D video system. Experimental results for HD1080 resolution images demonstrate that the algorithm can generate high-quality depth maps with an average reduction in the computational complexity of 98.2 % compared with a conventional algorithm. The parallel 3D video system can achieve a processing speed of 63.66 fps for HD720 resolution video.', '超标量', 'http://link.springer.com/article/10.1007/s11265-012-0691-5'),
(237, 'Processing prefix code in instruction queue storing fetched sets of plural instructions in superscalar processor', 'The present invention is directed to realize efficient issue of a superscalar instruction in an instruction set including an instruction with a prefix. A circuit is employed which retrieves an instruction of each instruction code type other than a prefix on the basis of a determination result of decoders for determining an instruction code type， adds the immediately preceding instruction to the retrieved instruction， and outputs the resultant to instruction executing means. When an instruction of a target instruction code type is detected in a plurality of instruction units to be searched， the circuit outputs the detected instruction code and the immediately preceding instruction other than the target instruction code type as prefix code candidates. When an instruction of a target instruction code type cannot be detected at the rear end of the instruction units to be searched， the circuit outputs the instruction at the rear end as a prefix code candidate. When an instruction of a target instruction code type is detected at the head in the instruction code search， the circuit outputs the instruction code at the head.', '超标量', 'http://www.freepatentsonline.com/8402256.html'),
(238, 'FPGA modeling of diverse superscalar processors ', 'There is increasing interest in using Field Programmable Gate Arrays (FPGAs) as platforms for computer architecture simulation. This paper is concerned with modeling superscalar processors with FPGAs. To be transformative， the FPGA modeling framework should meet three criteria. (1) Configurable: The framework should be able to model diverse superscalar processors， like a software model. In particular， it should be possible to vary superscalar parameters such as fetch， issue， and retire widths， depths of pipeline stages， queue sizes， etc. (2) Automatic: The framework should be able to automatically and efficiently map any one of its superscalar processor configurations to the FPGA. (3) Realistic: The framework should model a modern superscalar microarchitecture in detail， ideally with prototype quality， to enable a new era and depth of microarchitecture research. A framework that meets these three criteria will enjoy the convenience of a software model， the speed of an FPGA model， and the experience of a prototype. This paper describes FPGA-Sim， a configurable， automatically FPGA-synthesizable， and register-transfer-level (RTL) model of an out-of-order superscalar processor. FPGA-Sim enables FPGA modeling of diverse superscalar processors out-of-the-box. Moreover， its direct RTL implementation yields the fidelity of a hardware prototype.', '超标量', 'http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=6189225&queryText%3DSUPERSCALAR'),
(239, 'COMP Superscalar: Bringing GRID Superscalar and GCM Together ', 'This paper presents the design， implementation and evaluation of COMP Superscalar， a new and componentised version of the GRID superscalar framework that enables the easy development of Grid-unaware applications. By means of a simple programming model， COMP Superscalar keeps the Grid as transparent as possible to the programmer. Moreover， the performance of the applications is optimized by exploiting their inherent concurrency when executing them on the Grid. The runtime of COMP Superscalar has been designed to follow the Grid Component Model (GCM) and is therefore formed by several components， each one encapsulating a given functionality identified in GRID superscalar.', '超标量', 'http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=4534218&queryText%3DSUPERSCALAR'),
(240, 'The microarchitecture of superscalar processors ', 'Superscalar processing is the latest in along series of innovations aimed at producing ever-faster microprocessors. By exploiting instruction-level parallelism， superscalar processors are capable of executing more than one instruction in a clock cycle. This paper discusses the microarchitecture of superscalar processors. We begin with a discussion of the general problem solved by superscalar processors: converting an ostensibly sequential program into a more parallel one. The principles underlying this process， and the constraints that must be met， are discussed. The paper then provides a description of the specific implementation techniques used in the important phases of superscalar processing. The major phases include: (1) instruction fetching and conditional branch processing， (2) the determination of data dependences involving register values， (3) the initiation， or issuing， of instructions for parallel execution， (4) the communication of data values through memory via loads and stores， and (5) committing the process state in correct order so that precise interrupts can be supported. Examples of recent superscalar microprocessors， the MIPS R10000， the DEC 21164， and the AMD K5 are used to illustrate a variety of superscalar methods', '超标量', 'http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=476078&queryText%3Dsuperscalar'),
(241, 'Bulldog: a compiler for VLIW architectures', 'Very Long Instruction Word architectures are reduced-instruction set machines with a large number of parallel， pipelined functional units but only a single thread of control. These machines offer the promise of an immediate order-of-magnitude speed-up for general-purpose scientific computing. But unlike previous machines such as the Cray and the FPS-164， it is impossible to program VLIW machines in machine language - only a compiler for a high-level language (Fortran.) makes these machines feasible. This thesis demonstrates， via a working compiler， that this symbiosis of new architecture and new compiling technology is practicable. A traditional compiler couldn''t find enough parallelism in scientific programs to utilize a VLIW effectively. The Bulldog compiler uses several new compilation techniques: trace scheduling to find more parallelism， memory reference and memory bank disambiguation to increase memory bandwidth， and new code-generation algorithms. Results of preliminary experiments testing both the Bulldog compiler and various aspects of VLIW architectures are included.', 'VLIW', 'http://www.osti.gov/scitech/biblio/5724953'),
(242, 'The superblock: An effective technique for VLIW and superscalar compilation', 'A compiler for VLIW and superscalar processors must expose sufficient instruction-level parallelism (ILP) to effectively utilize the parallel hardware. However， ILP within basic blocks is extremely limited for control-intensive programs. We have developed a set of techniques for exploiting ILP across basic block boundaries. These techniques are based on a novel structure called thesuperblock. The superblock enables the optimizer and scheduler to extract more ILP along the important execution paths by systematically removing constraints due to the unimportant paths. Superblock optimization and scheduling have been implemented in the IMPACT-I compiler. This implementation gives us a unique opportunity to fully understand the issues involved in incorporating these techniques into a real compiler. Superblock optimizations and scheduling are shown to be useful while taking into account a variety of architectural features.', 'VLIW', 'http://link.springer.com/article/10.1007/BF01205185'),
(243, 'Design methodology for a tightly coupled VLIW/reconfigurable matrix architecture: a case study', 'Coarse-grained reconfigurable architectures have seen growing importance recently. Design tools and methodology are essential to their success. Based on our previous work on modulo scheduling algorithms and a novel architecture with tightly coupled VLIW/reconfigurable matrix， we present a C-based design flow using an MPEG-2 decoder as a design example. The application is mapped to the architecture in less than one person-week starting from a software implementation. The kernel and overall speedup over the reference VLIW are 4.84 and 3.05 respectively. The case study shows that our methodology and architecture can deliver a competitive package in terms of design efforts and performance over other programmable architectures.', 'VLIW', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=1269063&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1269063'),
(244, '一种提高同时多线程VLIW处理器中取指单元吞吐率的方法', '在同时多线程处理器中，提高取指单元的吞吐率意味着各线程之间的Cache竞争更加激烈，而这种竞争又制约着取指单元吞吐率的提高.本文针对当前超长指令字体系结构的新特点，提出了一种同时提高取指单元和处理器吞吐率的方法.该方法通过尽可能早地作废取指流水线中的无效地址，减少了由无效取指导致的程序Cache冲突，也提高了整个处理器的性能.实验结果表明，该方法使处理器和取指单元的吞吐率均相对提高了12%～23%，而一级程序Cache的失效率则略微增加甚至降低.另外，它还能够减少10%～25%的一级程序Cache读访问，从而降低了处理器的功耗.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgcykx200706030.aspx'),
(245, '基于VLIW体系结构的DSP寄存器堆的设计', '本文实现了多组数据的正确并行读写操作，满足了VLIW体系结构的CPU对多数据流处理的要求。本文针对VLIW体系结构采用流水线操作、条件执行的特点，通过对写入数据分别采用写控制信号的方法，实现流水线阻塞和指令的条件执行。由于VLIW体系结构具有很多共性，该方案可以根据具体的硬件进行修改，具有很好的可移植性。', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_hbdldxxb200603016.aspx'),
(246, '适用于VLIW数字信号处理器的功能验证策略', '由于数字信号处理器结构的复杂性，对于数字信号处理器的验证一直是一个很大的挑战.构建一个基于模拟形式的数字信号处理器验证系统，该系统采用测试向量产生工具μGP产生高效率的验证向量，并将硬件设计的模拟结果与周期级精确的模拟器产生的结果进行比较来验证数字信号处理器的正确性.采用该平台对一个九级流水线的超长指令字结构数字信号处理器进行验证，可以在4000条指令内达到99%以上的代码语句覆盖率.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_wdzxyjsj200702001.aspx'),
(247, '基于VLIW的指令格式的研究与设计', '计算机体系结构的设计思想在近四十年间发生了深刻的变化，而指令格式的设计是计算机体系结构设计的一个重要环节.该文首先介绍了一种典型RISC体系结构的指令格式，然后以IA-64为例对基于VLIW的指令格式进行了分析，并与RISC指令格式进行了比较，最后提出了一种新的基于VLIW的指令格式.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgcyyy200303024.aspx'),
(248, '基于VLIW的机器相关优化编译技术研究', 'VLIW体系结构性能的发挥在很大程度上依赖于其相应的编译器.编译优化主要包括两个方面:一方面是传统的编译器优化技术;另一方面是针对具体机器平台特定的优化技术.VLIW机器相关的编译优化技术应该针对具体的机器平台，基于超长指令字体系结构的特点，考虑如何充分利用机器提供的硬件资源，以达到软件(编译器)和硬件(CPU)的最大匹配，从而生成高效率高并行度的目标代码.论文从超长指令字的特点出发，探讨了在VLIW体系结构下与机器相关的编译优化的实现方案，同时提出了几点在具体进行与机器相关的优化编译时的关键技术.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgcyyy200302030.aspx'),
(249, '一种基于寄存器压力的VLIW DSP分簇算法', '寄存器是程序运行时最宝贵的资源之一，软件流水在对VLIW DSP指令调度的同时，会显著增加寄存器的压力，从而导致寄存器溢出，软件流水中止.在以往的研究中，软件流水之前的指令分簇会更多地考虑指令并行性，往往会把寄存器的压力交给寄存器分配阶段，当物理寄存器不够分配时会造成寄存器溢出.通过考察指令运行时的寄存器压力情况对指令进行分簇，这样可根据各个簇的寄存器压力的动态信息减少寄存器的溢出，提高指令运行效率.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjyy201001078.aspx'),
(250, 'VLIW DSP体系结构及其性能优化的软件方法', '影响DSP系统性能的因素主要有DSP处理器的体系结构、存储器系统、外设接口等硬件技术和程序优化等软件技术，其中软件的优化设计在DSP性能优化中起着越来越重要的作用。文章简要介绍了常见DSP系统的体系结构和存储器组织方法，并通过实例说明了对VLIW DSP系统进行软件优化的几种技术。', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgcyyy200105009.aspx'),
(251, '基于程序特征分析的流处理器VLIW压缩技术与解压实现', '本文通过对一系列典型应用在流处理器上的程序特征进行分析，提出了一种新的 VLIW分域压缩技术，剔除各个子域中的空操作，并设计了分布式指令存储器对压缩后的代码进行解压缩执行。实验证明，该技术能够减少MASA流处理器中近39％的片外指令访存，降低约65％的片上指令存储器空间需求；同时使得指令存储器面积和系统面积分别减少了约37％和8.9％。', 'VLIW', 'http://journal.nudt.edu.cn/publish_article/2012/1/201201027.pdf'),
(252, '一种面向VLIW指令压缩的寄存器分配算法', '本文针对VLIW结构的指令压缩方法，通过对编译中间代码的深入分析和总结，提出一种改进的寄存器分配算法，该算法在线性扫描的基础上，对寄存器的选择添加约束条件，应用该算法能够使得目标代码中寄存器的编号尽量靠近，从而达到更好的压缩效果.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgc200320061.aspx'),
(253, '在VLIW处理器上实现视频图像的运动估计算法的方法', '利用超长指令字(VLIW)处理器处理单指令多数据(SIMD)的优势，采用加速SIMD指令计算的数据拼接方案和多方向并行搜索方法以及适合图像数据复用的插值图像存储结构，优化实现了一个高效的ME软硬件结合的架构，分别在TMS320C64××及自行设计的LILY Processor上实现了H.264的QCIF图像数据的搜索及H.263的CIF图像数据的搜索.测试实验表明ME的搜索速度提高了3倍到15倍.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_wdzxyjsj201006002.aspx'),
(254, '动态VLIW体系结构关键技术研究与实现', '们对微处理器性能的追求永无止尽。目前工艺技术的飞速发展，为设计提供了广阔的空间，如何有效利用这上亿个晶体管，开发更快、更高效的微处理器，是当前计算机体系结构设计研究面临的极为重要的课题之一。 获得高度的并行性，仍然是开发高性能计算机系统的基本途径，而可以获得的并行效率，也越来越与程序的内在特性相关联。根据不同应用的特点，程序中的并行可以分为不同的级别。指令级并行(Instruction Level Parallelism，ILP)作为其中粒度最小的并行，是不同级别并行实现的基础。ILP可以通过软件或硬件技术开发，面向ILP开发的体系结构只有合理划分软硬件在ILP开发过程中承担的工作，并且软、硬件紧密配合，才能取得理想的性能和复杂度。动态VLIW(Very Long Instruction Word，超长指令字)结构兼具软硬件ILP开发技术的优点，是具有良好性能潜力和发展前景的计算机体系结构技术方向之一。 本文在深入分析开发ILP的软硬件技术优缺点的基础上，以降低硬件设计的复杂度为目标，划分了它们在动态VLIW结构中承担的ILP开发工作，明确了需要解决的关键技术。', 'VLIW', 'http://cdmd.cnki.com.cn/Article/CDMD-90002-2005014460.htm'),
(255, '一种动态VLIW调度机制的研究和实现', '本文提出了一种基于确定指令延迟的动态VLIW调度机制，该机制利用大部分指令执行时间确定的特点，根据运行时信息重新调度指令的执行顺序，以进一步开发ILP.在FPGA上的实验结果表明，该机制具有线性的硬件复杂度.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgcykx200807025.aspx'),
(256, 'VLIW体系结构微处理器的控制流分析与其模拟软件设计', '本文在研究超长指令字(VLIW)体系结构的基础上，总结了VLIW体系结构的指令结构特征、处理器结构特征和执行特征，通过比较VLIW体系结构微处理器模拟器的两种设计方案，选定以结构为基础设计模拟器的方案，并解决了模拟器的设计难点--串并行冲突的问题.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_xxwxjsjxt200105001.aspx'),
(257, '为VLIW处理器的特殊功能部件生成代码的新方法', '本文提出了一种新的方法来解决这些问题.定义了一种可视化并行建模语言VRTL-P，使用它来描述不同操作间逻辑上的可并行性.本文还实现了一个VRTL-P的在线分析器，它可以根据VLIW处理器的具体实现来判断一组操作是否可以拼装到一条VLIW的指令中.', 'VLIW', 'http://d.wanfangdata.com.cn/periodical_jsjgcyyy200424034.aspx'),
(258, 'Improving Dictionary-Based Code Compression in VLIW Architectures', 'Reducing code size is crucial in embedded systems as well as in high-performance systems to overcome the communication bottleneck between memory and CPU， especially with VLIW (Very Long Instruction Word) processors that require a high-bandwidth instruction prefetching. This paper presents a new approach for dictionary-based code compression in VLIW processor-based systems using isomorphism among instruction words. After we divide instruction words into two groups， one for opcode group and the other for operand group， the proposed compression algorithm is applied to each group for maximal code compression. Frequently-used instruction words are extracted from the original code to be mapped into two dictionaries， an opcode dictionary and an operand dictionary. According to the SPEC95 benchmarks， the proposed technique has achieved an average code compression ratio of 63%， 69%， and 71% in a 4-issue， 8-issue， and 12-issue VLIW architecture， respectively.', 'VLIW', 'http://search.ieice.org/bin/summary.php?id=e82-a_11_2318'),
(259, 'Energy estimation and optimization of embedded VLIW processors based on instruction clustering', 'Aim of this paper is to propose a methodology for the definition of an instruction-level energy estimation framework for VLIW (very long instruction word) processors. The power modeling methodology is the key issue to define an effective energy-aware software optimisation strategy for state-of-the-art ILP (instruction level parallelism) processors. The methodology is based on an energy model for VLIW processors that exploits instruction clustering to achieve an efficient and fine grained energy estimation. The approach aims to reduce the complexity of the characterization problem for VLIW processors from exponential， with respect to the number of parallel operations in the same very long instruction， to quadratic， with respect to the number of instruction clusters. Furthermore， the paper proposes a spatial scheduling algorithm based on a low-power reordering of the parallel operations within the same long instruction. Experimental results have been carried out on the Lx processor， a 4-issue VLIW core jointly designed by HPLabs and STMicroelectronics. The results have shown an average error of 1.9% between the cluster-based estimation model and the reference design， with a standard deviation of 5.8%. For the Lx architecture， the spatial instruction scheduling algorithm provides an average energy saving of 12%.', 'VLIW', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=1012747&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1012747'),
(260, 'LZW-based code compression for VLIW embedded systems', 'We propose a new variable-sized-block method for VLIW code compression. Code compression traditionally works on fixed-sized blocks and its efficiency is limited by the small block size. Branch blocks-instructions between two consecutive possible branch targets-provide larger blocks for code compression. We propose LZW - based algorithms to compress branch blocks. Our approach is fully adaptive and generates coding table on-the-fly during compression and decompression. When encountering a branch target， the coding table is cleared to ensure correctness. Decompression requires only a simple lookup and update when necessary. Our method provides 8 bytes peak decompression bandwidth and 1.82 bytes in average. Compared to Huffman''s 1 byte and V2F''s 13-bit peak performance， our methods have higher decoding bandwidth and comparable compression ratio. Parallel decompression could also be applied to our methods， which is more suitable for VLIW architecture.', 'VLIW', 'http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=1269210&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1269210');
